buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "gradle.plugin.com.ewerk.gradle.plugins:querydsl-plugin:1.0.10"
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.4'
    id 'io.spring.dependency-management' version '1.1.4'
    id "org.openapi.generator" version "6.6.0"
    id 'com.bmuschko.docker-spring-boot-application' version '7.4.0'
    id 'checkstyle'
    id 'jacoco'
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
    id "io.sentry.jvm.gradle" version "4.4.0"
}


group = 'ag.act'
version = '0.0.1-SNAPSHOT'

ext {
    queryDslVersion = "5.0.0"
    jakartaPersistenceApiVersion = "3.1.0"
    jsonwebtokenVersion = "0.12.5"
}

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    querydsl.extendsFrom compileClasspath
}

repositories {
    mavenCentral()
}

jacoco {
    toolVersion = "0.8.11"
}

jacocoTestReport {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/Q*.class',
                    '**/entity/**/*.class',
                    '**/*ApiDelegate.class'
            ])
        }))
    }
}

sentry {
    // Generates a JVM (Java, Kotlin, etc.) source bundle and uploads your source code to Sentry.
    // This enables source context, allowing you to see your source
    // code as part of your stack traces in Sentry.
    includeSourceContext = false

    org = "hoonisoft"
    projectName = "salary-plus-api"
    authToken = System.getenv("SENTRY_AUTH_TOKEN")
}

apply plugin: 'org.openapi.generator'
apply plugin: 'com.ewerk.gradle.plugins.querydsl'

dependencies {
    implementation 'com.fasterxml.jackson:jackson-bom:2.13.5'

    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation "org.springframework.boot:spring-boot-starter-test"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation 'org.springframework.retry:spring-retry'
    implementation 'net.logstash.logback:logstash-logback-encoder:7.4'

    implementation 'com.google.firebase:firebase-admin:9.3.0'
    implementation 'software.amazon.awssdk:s3'
    implementation 'software.amazon.awssdk:lambda'
    implementation 'software.amazon.awssdk:ses'
    implementation 'javax.mail:javax.mail-api:1.6.2'
    implementation 'com.sun.mail:javax.mail:1.6.2'

    implementation 'org.freemarker:freemarker:2.3.32'

    implementation 'com.openhtmltopdf:openhtmltopdf-pdfbox:1.0.10'
    implementation 'com.openhtmltopdf:openhtmltopdf-slf4j:1.0.10'
    implementation 'org.jsoup:jsoup:1.17.2'

    implementation "org.apiguardian:apiguardian-api:1.1.2"
    implementation "jakarta.persistence:jakarta.persistence-api:${jakartaPersistenceApiVersion}"
    implementation 'jakarta.annotation:jakarta.annotation-api:2.1.1'
    implementation 'jakarta.activation:jakarta.activation-api:2.1.1'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'javax.servlet:javax.servlet-api:4.0.1'
    implementation 'jakarta.validation:jakarta.validation-api:3.0.0'
    implementation 'org.hibernate.validator:hibernate-validator'
    implementation 'org.postgresql:postgresql'
    implementation 'org.openapitools:jackson-databind-nullable:0.2.2'
    implementation 'io.hypersistence:hypersistence-utils-hibernate-62:3.7.3'
    implementation('org.liquibase:liquibase-core:4.20.0') {
        exclude group: 'org.yaml', module: 'snakeyaml'
    }
    implementation 'org.yaml:snakeyaml:2.0'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'
    implementation 'com.fasterxml.jackson.core:jackson-databind'

    // swagger
    implementation("io.springfox:springfox-oas:3.0.0")
    implementation("io.springfox:springfox-swagger-ui:3.0.0")
    implementation("io.springfox:springfox-boot-starter:3.0.0")

    implementation "io.jsonwebtoken:jjwt:${jsonwebtokenVersion}"

    implementation 'commons-codec:commons-codec'
    implementation 'commons-io:commons-io:2.16.0'

    implementation 'com.slack.api:bolt:1.38.3'

    implementation 'org.imgscalr:imgscalr-lib:4.2'

    implementation "com.querydsl:querydsl-core:5.0.0"
    implementation "com.querydsl:querydsl-collections"
    implementation("com.querydsl:querydsl-jpa:5.0.0:jakarta")
    implementation fileTree(dir: 'libs', include: ['*.*'])

    testImplementation 'org.projectlombok:lombok'

    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api:2.1.1"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api:3.1.0"
    annotationProcessor 'org.projectlombok:lombok'

    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
    runtimeOnly 'com.h2database:h2'

    testImplementation 'io.micrometer:micrometer-observation-test:1.11.2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-test-autoconfigure'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'com.github.shiver-me-timbers:smt-random:1.8'
    testImplementation 'com.github.shiver-me-timbers:smt-matchers:1.2'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
    testImplementation 'com.h2database:h2'
    testImplementation 'org.mockito:mockito-inline:5.2.0'
    testImplementation 'com.pgs-soft:HttpClientMock:1.0.0'


    dependencyManagement {
        imports {
            mavenBom("software.amazon.awssdk:bom:2.25.20")
        }
    }
    implementation 'io.micrometer:micrometer-core'
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
}

test {
    jvmArgs("-Duser.timezone=UTC")
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(3) ?: 1
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    finalizedBy jacocoTestReport
}

task unitTest(type: Test) {
    useJUnitPlatform {
        excludeTags "IntegrationTests"
    }
    testLogging {
        events "passed", "skipped", "failed"
    }
    finalizedBy jacocoTestReport
}

task test1(type: Test) {
    jvmArgs("-Duser.timezone=UTC")
    maxParallelForks = 1
    filter {
        includeTestsMatching "ag.act.api.admin.auth.*"
        includeTestsMatching "ag.act.api.admin.campaign.*"
        includeTestsMatching "ag.act.api.admin.comment.*"
        includeTestsMatching "ag.act.api.admin.commons.*"
        includeTestsMatching "ag.act.api.admin.dashboard.*"
        includeTestsMatching "ag.act.api.admin.digitaldocument.*"
        includeTestsMatching "ag.act.api.admin.post.*"
        includeTestsMatching "ag.act.api.admin.popup.*"
        includeTestsMatching "ag.act.api.admin.push.*"
    }
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

task test2(type: Test) {
    jvmArgs("-Duser.timezone=UTC")
    maxParallelForks = 1
    filter {
        includeTestsMatching "ag.act.api.admin.report.*"
        includeTestsMatching "ag.act.api.admin.solidarity.*"
        includeTestsMatching "ag.act.api.admin.stock.*"
        includeTestsMatching "ag.act.api.admin.stockgroup.*"
        includeTestsMatching "ag.act.api.admin.stockreferencedate.*"
        includeTestsMatching "ag.act.api.admin.upload.*"
    }
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

task test3(type: Test) {
    jvmArgs("-Duser.timezone=UTC")
    maxParallelForks = 1
    filter {
        includeTestsMatching "ag.act.api.admin.user.*"
        includeTestsMatching "ag.act.api.app.*"
        includeTestsMatching "ag.act.api.auth.*"
        includeTestsMatching "ag.act.api.batch.*"
        includeTestsMatching "ag.act.api.digitalproxy.*"
        includeTestsMatching "ag.act.api.flow.*"
    }
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

task test4(type: Test) {
    jvmArgs("-Duser.timezone=UTC")
    maxParallelForks = 1
    filter {
        includeTestsMatching "ag.act.api.home.*"
        includeTestsMatching "ag.act.api.image.*"
        includeTestsMatching "ag.act.api.images.*"
        includeTestsMatching "ag.act.api.notification.*"
        includeTestsMatching "ag.act.api.publicopen.*"
        includeTestsMatching "ag.act.api.smsauth.*"
        includeTestsMatching "ag.act.api.stockboardgroupcategory.*"
        includeTestsMatching "ag.act.api.stockrankings.*"
        includeTestsMatching "ag.act.api.stocksearch.*"
        includeTestsMatching "ag.act.api.stockhome.*"
    }
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

task test5(type: Test) {
    jvmArgs("-Duser.timezone=UTC")
    maxParallelForks = 1
    filter {
        includeTestsMatching "ag.act.api.stockboardgrouppost.*"
        includeTestsMatching "ag.act.api.stocksolidarity.*"
        includeTestsMatching "ag.act.api.user.*"
    }
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

task test6(type: Test) {
    jvmArgs("-Duser.timezone=UTC")
    maxParallelForks = 1
    filter {
        excludeTestsMatching "ag.act.api.admin.*"
        excludeTestsMatching "ag.act.api.app.*"
        excludeTestsMatching "ag.act.api.auth.*"
        excludeTestsMatching "ag.act.api.batch.*"
        excludeTestsMatching "ag.act.api.digitalproxy.*"
        excludeTestsMatching "ag.act.api.flow.*"
        excludeTestsMatching "ag.act.api.home.*"
        excludeTestsMatching "ag.act.api.image.*"
        excludeTestsMatching "ag.act.api.images.*"
        excludeTestsMatching "ag.act.api.notification.*"
        excludeTestsMatching "ag.act.api.publicopen.*"
        excludeTestsMatching "ag.act.api.smsauth.*"
        excludeTestsMatching "ag.act.api.stockboardgroupcategory.*"
        excludeTestsMatching "ag.act.api.stockboardgrouppost.*"
        excludeTestsMatching "ag.act.api.stockhome.*"
        excludeTestsMatching "ag.act.api.stocksolidarity.*"
        excludeTestsMatching "ag.act.api.user.*"
        excludeTestsMatching "ag.act.api.stockrankings.*"
        excludeTestsMatching "ag.act.api.stocksearch.*"
    }
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

sourceSets {
    main {
        java {
            srcDir "${buildDir}/generated-sources/openapi/"
            srcDir "${buildDir}/generated/querydsl"
            srcDir "src/main/java"
        }
    }
    test {
        java {
            srcDir "src/test/java"
            srcDir "src/integrationTest/java"
            resources {
                srcDir "src/integrationTest/resources"
                srcDir "src/main/resources"
                exclude 'db/**'
                exclude 'application**.yaml'
                exclude 'logback.xml'
            }
        }
    }
}

openApiGenerate {
    generatorName = "spring"
    inputSpec = "$rootDir/src/main/resources/static/openapi.yaml".toString()
    outputDir = "$buildDir/generated-sources/openapi/".toString()
    apiPackage = "ag.act.api"
    modelPackage = "ag.act.model"
    library = "spring-boot"
    typeMappings = [
            "double"        : "java.math.BigDecimal",
            "OffsetDateTime": "java.time.Instant"
    ]
    configOptions = [
            useSpringBoot3       : "true",
            basePackage          : "ag.act",
            sourceFolder         : "src/main/java",
            delegatePattern      : "true",
            useTags              : "true",
            library              : "spring-boot",
            oas3                 : "true",
            openApiNullable      : "false",
            documentationProvider: "none"
    ]
}

task processOpenApiResources(type: Copy) {
    dependsOn("openApiGenerate")

    filteringCharset = 'UTF-8'

    from("$buildDir/generated-sources/openapi/src/main/java") {
        include '**/*.java'
        filter { line ->
            def line2 = line.replaceAll('import jakarta.annotation.Generated;', 'import jakarta.annotation.Generated;\nimport jakarta.validation.*;\nimport ag.act.validation.constraints.*;')
            return line2.replaceAll('@JsonCreator', '@JsonCreator(mode = JsonCreator.Mode.DELEGATING)')
        }
    }
    into "$buildDir/generated-sources/openapi/pre_process/src/main/java"
}

task deleteOpenApiSourceDirectory(type: Delete) {
    dependsOn("processOpenApiResources")
    delete "$buildDir/generated-sources/openapi/src/main/java"
}

task moveOpenApiSourceDirectory(type: Copy) {
    dependsOn("deleteOpenApiSourceDirectory")
    from "$buildDir/generated-sources/openapi/pre_process/src/main/java"
    into "$buildDir/generated-sources/openapi/src/main/java"
}

task deletePreprocessOpenApiSourceDirectory(type: Delete) {
    dependsOn("moveOpenApiSourceDirectory")
    delete "$buildDir/generated-sources/openapi/pre_process"
}


querydsl {
    jpa = true
    querydslSourcesDir = "$buildDir/generated/querydsl".toString()
}


tasks.initQuerydslSourcesDir.dependsOn deletePreprocessOpenApiSourceDirectory

compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
    enabled = false
}

task mergeOpenApi(type: Exec) {
    commandLine 'sh', './scripts/ci/merge-openapi.sh'
}

generateSentryBundleIdJava.mustRunAfter tasks.compileQuerydsl
sentryCollectSourcesJava.mustRunAfter tasks.compileQuerydsl
sentryBundleSourcesJava.mustRunAfter tasks.compileQuerydsl

compileJava.dependsOn tasks.sentryBundleSourcesJava

task moveQuerydslSourceDirectory(type: Copy) {
    dependsOn("compileJava")
    from "$buildDir/generated/sources/annotationProcessor/java/main"
    into "$buildDir/generated/querydsl/"
}

tasks.moveQuerydslSourceDirectory.dependsOn compileJava

jar {
    enabled = false
}

bootJar {
    dependsOn 'mergeOpenApi'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
//   // https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/platforms-linux-extend.html#platforms-linux-extend.example
//    from('./.ebextensions') { into '.ebextensions' }
//    from('./.platform') { into '.platform' }
//    from('build/resources/main/static') {
//        into('BOOT-INF/classes/static')
//        include('openapi-bundled.yaml')
//    }
}

task fatJar(type: Jar) {
    with jar
}

import com.bmuschko.gradle.docker.tasks.image.Dockerfile

task createDockerfile(type: Dockerfile, dependsOn: fatJar) {
    destFile = project.file('Dockerfile')
    from 'azul/zulu-openjdk-alpine:17'
    runCommand('addgroup -S actuser && adduser -S actuser -G actuser')
    user('actuser:actuser')
    user('actuser:actuser')
    copyFile("build/libs/${project.name}-*.jar", "/tmp/${project.name}.jar")
    workingDir('/tmp')
    exposePort(8080)
    defaultCommand("java", "-XX:+UnlockExperimentalVMOptions", "-XX:+UseContainerSupport", "-Djava.security.egd=file:/dev/./urandom", "-jar", "${project.name}.jar")
}
