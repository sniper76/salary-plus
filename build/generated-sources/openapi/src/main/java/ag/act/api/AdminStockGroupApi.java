/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ag.act.api;

import ag.act.model.CreateStockGroupRequest;
import ag.act.model.ErrorResponse;
import ag.act.model.GetStockGroupDetailsDataResponse;
import ag.act.model.GetStockGroupsResponse;
import ag.act.model.SimpleStringResponse;
import ag.act.model.StockGroupDataArrayResponse;
import ag.act.model.StockGroupDataResponse;
import ag.act.model.UpdateStockGroupRequest;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;
import jakarta.validation.*;
import ag.act.validation.constraints.*;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-02-13T06:43:13.649172+09:00[Asia/Seoul]")
@Validated
public interface AdminStockGroupApi {

    default AdminStockGroupApiDelegate getDelegate() {
        return new AdminStockGroupApiDelegate() {};
    }

    /**
     * POST /api/admin/stock-groups : CMS 종목그룹 등록 하기
     *
     * @param createStockGroupRequest  (required)
     * @return Successful response (status code 200)
     *         or Bad Request (status code 400)
     *         or Not Found (status code 404)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/admin/stock-groups",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<StockGroupDataResponse> createStockGroup(
         @Valid @RequestBody CreateStockGroupRequest createStockGroupRequest
    ) {
        return getDelegate().createStockGroup(createStockGroupRequest);
    }


    /**
     * DELETE /api/admin/stock-groups/{stockGroupId} : CMS 종목그룹 삭제하기
     *
     * @param stockGroupId Stock group ID (required)
     * @return Successful response (status code 200)
     *         or Bad Request (status code 400)
     *         or Not Found (status code 404)
     */
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/admin/stock-groups/{stockGroupId}",
        produces = { "application/json" }
    )
    default ResponseEntity<SimpleStringResponse> deleteStockGroup(
         @PathVariable("stockGroupId") Long stockGroupId
    ) {
        return getDelegate().deleteStockGroup(stockGroupId);
    }


    /**
     * GET /api/admin/stock-groups/{stockGroupId} : CMS 종목그룹 상세 조회하기
     *
     * @param stockGroupId Stock group ID (required)
     * @return Successful response (status code 200)
     *         or Bad Request (status code 400)
     *         or Not Found (status code 404)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/admin/stock-groups/{stockGroupId}",
        produces = { "application/json" }
    )
    default ResponseEntity<GetStockGroupDetailsDataResponse> getStockGroupDetails(
         @PathVariable("stockGroupId") Long stockGroupId
    ) {
        return getDelegate().getStockGroupDetails(stockGroupId);
    }


    /**
     * GET /api/admin/stock-groups : CMS 종목그룹 목록 조회하기
     *
     * @param stockGroupId Stock group ID (optional)
     * @param page Page number (optional, default to 1)
     * @param size Number of items per page (optional, default to 10)
     * @param sorts Sorting criteria (optional, default to createdAt:desc)
     * @return Successful response (status code 200)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/admin/stock-groups",
        produces = { "application/json" }
    )
    default ResponseEntity<GetStockGroupsResponse> getStockGroups(
         @Valid @RequestParam(value = "stockGroupId", required = false) Long stockGroupId,
         @Valid @RequestParam(value = "page", required = false, defaultValue = "1") Integer page,
         @Valid @RequestParam(value = "size", required = false, defaultValue = "10") Integer size,
         @Valid @RequestParam(value = "sorts", required = false, defaultValue = "createdAt:desc") List<String> sorts
    ) {
        return getDelegate().getStockGroups(stockGroupId, page, size, sorts);
    }


    /**
     * GET /api/admin/stock-groups/auto-complete : CMS 종목그룹 자동 완성
     *
     * @param searchKeyword Search keyword (optional)
     * @return Success (status code 200)
     * @deprecated
     */
    @Deprecated
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/admin/stock-groups/auto-complete",
        produces = { "application/json" }
    )
    default ResponseEntity<StockGroupDataArrayResponse> getStockGroupsAutoComplete(
         @Valid @RequestParam(value = "searchKeyword", required = false) String searchKeyword
    ) {
        return getDelegate().getStockGroupsAutoComplete(searchKeyword);
    }


    /**
     * PUT /api/admin/stock-groups/{stockGroupId} : CMS 종목그룹 수정 하기
     *
     * @param stockGroupId Stock group ID (required)
     * @param updateStockGroupRequest  (required)
     * @return Successful response (status code 200)
     *         or Bad Request (status code 400)
     *         or Not Found (status code 404)
     */
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/admin/stock-groups/{stockGroupId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<StockGroupDataResponse> updateStockGroup(
         @PathVariable("stockGroupId") Long stockGroupId,
         @Valid @RequestBody UpdateStockGroupRequest updateStockGroupRequest
    ) {
        return getDelegate().updateStockGroup(stockGroupId, updateStockGroupRequest);
    }

}
