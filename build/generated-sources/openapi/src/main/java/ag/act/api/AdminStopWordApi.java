/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ag.act.api;

import ag.act.model.CreateStopWordRequest;
import ag.act.model.ErrorResponse;
import ag.act.model.GetStopWordResponse;
import ag.act.model.SimpleStringResponse;
import ag.act.model.StopWordDataResponse;
import ag.act.model.UpdateStopWordRequest;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;
import jakarta.validation.*;
import ag.act.validation.constraints.*;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-02-13T06:43:13.649172+09:00[Asia/Seoul]")
@Validated
public interface AdminStopWordApi {

    default AdminStopWordApiDelegate getDelegate() {
        return new AdminStopWordApiDelegate() {};
    }

    /**
     * POST /api/admin/stop-words : CMS 금칙어 등록
     *
     * @param createStopWordRequest  (required)
     * @return Successful response (status code 200)
     *         or Bad Request (status code 400)
     *         or Forbidden (status code 403)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/admin/stop-words",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<StopWordDataResponse> createStopWord(
         @Valid @RequestBody CreateStopWordRequest createStopWordRequest
    ) {
        return getDelegate().createStopWord(createStopWordRequest);
    }


    /**
     * DELETE /api/admin/stop-words/{stopWordId} : CMS 금칙어 삭제
     *
     * @param stopWordId ID (required)
     * @return Successful response (status code 200)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/admin/stop-words/{stopWordId}",
        produces = { "application/json" }
    )
    default ResponseEntity<SimpleStringResponse> deleteStopWord(
         @PathVariable("stopWordId") Long stopWordId
    ) {
        return getDelegate().deleteStopWord(stopWordId);
    }


    /**
     * GET /api/admin/stop-words : 금칙어 목록 조회하기
     *
     * @param filterType StopWordFilterType - ALL(전체), ACTIVE(활성화), INACTIVE(비활성화) (optional)
     * @param searchKeyword Search keyword (optional)
     * @param page Page number (optional, default to 1)
     * @param size Number of items per page (optional, default to 20)
     * @param sorts Sorting criteria (optional, default to createdAt:desc)
     * @return Successful response (status code 200)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/admin/stop-words",
        produces = { "application/json" }
    )
    default ResponseEntity<GetStopWordResponse> getStopWords(
         @Valid @RequestParam(value = "filterType", required = false) String filterType,
         @Valid @RequestParam(value = "searchKeyword", required = false) String searchKeyword,
         @Valid @RequestParam(value = "page", required = false, defaultValue = "1") Integer page,
         @Valid @RequestParam(value = "size", required = false, defaultValue = "20") Integer size,
         @Valid @RequestParam(value = "sorts", required = false, defaultValue = "createdAt:desc") List<String> sorts
    ) {
        return getDelegate().getStopWords(filterType, searchKeyword, page, size, sorts);
    }


    /**
     * POST /api/admin/stop-words/{stopWordId} : CMS 금칙어 활성화 or 비활성화
     *
     * @param stopWordId ID (required)
     * @param updateStopWordRequest  (required)
     * @return Successful response (status code 200)
     *         or Bad Request (status code 400)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/admin/stop-words/{stopWordId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<StopWordDataResponse> updateStopWord(
         @PathVariable("stopWordId") Long stopWordId,
         @Valid @RequestBody UpdateStopWordRequest updateStopWordRequest
    ) {
        return getDelegate().updateStopWord(stopWordId, updateStopWordRequest);
    }

}
