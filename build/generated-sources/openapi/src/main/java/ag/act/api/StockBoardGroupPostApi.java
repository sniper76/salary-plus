/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ag.act.api;

import ag.act.model.CreatePostRequest;
import ag.act.model.ErrorResponse;
import ag.act.model.GetBoardGroupPostResponse;
import ag.act.model.PostDataResponse;
import ag.act.model.PostDetailsDataResponse;
import ag.act.model.SimpleStringResponse;
import ag.act.model.UpdatePostRequest;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;
import jakarta.validation.*;
import ag.act.validation.constraints.*;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-02-13T06:43:13.649172+09:00[Asia/Seoul]")
@Validated
public interface StockBoardGroupPostApi {

    default StockBoardGroupPostApiDelegate getDelegate() {
        return new StockBoardGroupPostApiDelegate() {};
    }

    /**
     * POST /api/stocks/{stockCode}/board-groups/{boardGroupName}/posts : 게시글 생성하기
     *
     * @param stockCode Stock code parameter (required)
     * @param boardGroupName Board group name parameter (required)
     * @param createPostRequest  (required)
     * @return Successful response (status code 200)
     *         or Board group of the category does not match (status code 400)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/stocks/{stockCode}/board-groups/{boardGroupName}/posts",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<PostDetailsDataResponse> createBoardGroupPost(
         @PathVariable("stockCode") String stockCode,
         @PathVariable("boardGroupName") String boardGroupName,
         @Valid @RequestBody CreatePostRequest createPostRequest
    ) {
        return getDelegate().createBoardGroupPost(stockCode, boardGroupName, createPostRequest);
    }


    /**
     * POST /api/stocks/{stockCode}/board-groups/{boardGroupName}/posts/holder-list-read-and-copy : 게시글 열람등사 생성하기
     *
     * @param stockCode Stock code parameter (required)
     * @param boardGroupName Board group name parameter (required)
     * @param createPostRequest  (optional)
     * @param signImage 서명 이미지 (optional)
     * @param idCardImage 신분증 이미지 (optional)
     * @param bankAccountImages  (optional)
     * @param hectoEncryptedBankAccountPdf 암호화된 헥토측 잔고증명서 pdf 파일 (optional)
     * @return Successful response (status code 200)
     *         or Board group of the category does not match (status code 400)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/stocks/{stockCode}/board-groups/{boardGroupName}/posts/holder-list-read-and-copy",
        produces = { "application/json" },
        consumes = { "multipart/form-data" }
    )
    default ResponseEntity<PostDetailsDataResponse> createPostHolderListReadAndCopy(
         @PathVariable("stockCode") String stockCode,
         @PathVariable("boardGroupName") String boardGroupName,
         @Valid @RequestParam(value = "createPostRequest", required = false) String createPostRequest,
         @RequestPart(value = "signImage", required = false) MultipartFile signImage,
         @RequestPart(value = "idCardImage", required = false) MultipartFile idCardImage,
         @RequestPart(value = "bankAccountImages", required = false) List<MultipartFile> bankAccountImages,
         @RequestPart(value = "hectoEncryptedBankAccountPdf", required = false) MultipartFile hectoEncryptedBankAccountPdf
    ) {
        return getDelegate().createPostHolderListReadAndCopy(stockCode, boardGroupName, createPostRequest, signImage, idCardImage, bankAccountImages, hectoEncryptedBankAccountPdf);
    }


    /**
     * DELETE /api/stocks/{stockCode}/board-groups/{boardGroupName}/posts/{postId} : 게시글 삭제하기
     *
     * @param stockCode Stock code parameter (required)
     * @param boardGroupName Board group name parameter (required)
     * @param postId Post ID parameter (required)
     * @return Successful (status code 200)
     *         or Board group of the category does not match (status code 400)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/stocks/{stockCode}/board-groups/{boardGroupName}/posts/{postId}",
        produces = { "application/json" }
    )
    default ResponseEntity<SimpleStringResponse> deleteBoardGroupPost(
         @PathVariable("stockCode") String stockCode,
         @PathVariable("boardGroupName") String boardGroupName,
         @PathVariable("postId") Long postId
    ) {
        return getDelegate().deleteBoardGroupPost(stockCode, boardGroupName, postId);
    }


    /**
     * GET /api/stocks/{stockCode}/board-groups/{boardGroupName}/posts/{postId} : 게시글 상세 조회, 의결권 위임 상세 조회
     *
     * @param stockCode Stock code parameter (required)
     * @param boardGroupName Board group name parameter (required)
     * @param postId Post ID parameter (required)
     * @return Successful response (status code 200)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/stocks/{stockCode}/board-groups/{boardGroupName}/posts/{postId}",
        produces = { "application/json" }
    )
    default ResponseEntity<PostDataResponse> getBoardGroupPostDetail(
         @PathVariable("stockCode") String stockCode,
         @PathVariable("boardGroupName") String boardGroupName,
         @PathVariable("postId") Long postId
    ) {
        return getDelegate().getBoardGroupPostDetail(stockCode, boardGroupName, postId);
    }


    /**
     * GET /api/stocks/{stockCode}/board-groups/{boardGroupName}/posts : 게시판 그룹 내 게시글 조회
     *
     * @param stockCode Stock code parameter (required)
     * @param boardGroupName Board group name parameter (required)
     * @param boardCategory Board category parameter if not specified, all categories will be returned (optional)
     * @param boardCategories Board Group Categories (optional)
     * @param page Page number (optional, default to 1)
     * @param size Number of items per page (optional, default to 10)
     * @param sorts Sorting criteria (optional, default to createdAt:desc)
     * @param isExclusiveToHolders If true, only posts exclusive to stockholders will be returned (optional, default to false)
     * @param isExclusiveToPublic If true, only posts exclusive to public will be returned (optional, default to false)
     * @param isNotDeleted If true, only not deleted posts will be returned (optional, default to false)
     * @return Successful response (status code 200)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/stocks/{stockCode}/board-groups/{boardGroupName}/posts",
        produces = { "application/json" }
    )
    default ResponseEntity<GetBoardGroupPostResponse> getBoardGroupPosts(
         @PathVariable("stockCode") String stockCode,
         @PathVariable("boardGroupName") String boardGroupName,
         @Valid @RequestParam(value = "boardCategory", required = false) String boardCategory,
         @Valid @RequestParam(value = "boardCategories", required = false) List<String> boardCategories,
         @Valid @RequestParam(value = "page", required = false, defaultValue = "1") Integer page,
         @Valid @RequestParam(value = "size", required = false, defaultValue = "10") Integer size,
         @Valid @RequestParam(value = "sorts", required = false, defaultValue = "createdAt:desc") List<String> sorts,
         @Valid @RequestParam(value = "isExclusiveToHolders", required = false, defaultValue = "false") Boolean isExclusiveToHolders,
         @Valid @RequestParam(value = "isExclusiveToPublic", required = false, defaultValue = "false") Boolean isExclusiveToPublic,
         @Valid @RequestParam(value = "isNotDeleted", required = false, defaultValue = "false") Boolean isNotDeleted
    ) {
        return getDelegate().getBoardGroupPosts(stockCode, boardGroupName, boardCategory, boardCategories, page, size, sorts, isExclusiveToHolders, isExclusiveToPublic, isNotDeleted);
    }


    /**
     * PATCH /api/stocks/{stockCode}/board-groups/{boardGroupName}/posts/{postId} : 게시글 수정하기
     *
     * @param stockCode Stock code parameter (required)
     * @param boardGroupName Board group name parameter (required)
     * @param postId Post ID parameter (required)
     * @param updatePostRequest  (required)
     * @return Successful response (status code 200)
     *         or Board group of the category does not match (status code 400)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/api/stocks/{stockCode}/board-groups/{boardGroupName}/posts/{postId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<PostDetailsDataResponse> updateBoardGroupPost(
         @PathVariable("stockCode") String stockCode,
         @PathVariable("boardGroupName") String boardGroupName,
         @PathVariable("postId") Long postId,
         @Valid @RequestBody UpdatePostRequest updatePostRequest
    ) {
        return getDelegate().updateBoardGroupPost(stockCode, boardGroupName, postId, updatePostRequest);
    }

}
