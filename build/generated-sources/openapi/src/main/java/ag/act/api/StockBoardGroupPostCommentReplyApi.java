/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ag.act.api;

import ag.act.model.CommentDataResponse;
import ag.act.model.CommentPagingResponse;
import ag.act.model.CreateCommentRequest;
import ag.act.model.ErrorResponse;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;
import jakarta.validation.*;
import ag.act.validation.constraints.*;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-02-13T06:43:13.649172+09:00[Asia/Seoul]")
@Validated
public interface StockBoardGroupPostCommentReplyApi {

    default StockBoardGroupPostCommentReplyApiDelegate getDelegate() {
        return new StockBoardGroupPostCommentReplyApiDelegate() {};
    }

    /**
     * POST /api/stocks/{stockCode}/board-groups/{boardGroupName}/posts/{postId}/comments/{commentId}/replies : 댓글의 답글 작성하기
     *
     * @param stockCode Stock code parameter (required)
     * @param boardGroupName Board group name parameter (required)
     * @param postId Post ID parameter (required)
     * @param commentId Comment ID parameter (required)
     * @param createCommentRequest  (required)
     * @return Successful response (status code 200)
     *         or Forbidden (status code 403)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/stocks/{stockCode}/board-groups/{boardGroupName}/posts/{postId}/comments/{commentId}/replies",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<CommentDataResponse> createBoardGroupPostCommentReply(
         @PathVariable("stockCode") String stockCode,
         @PathVariable("boardGroupName") String boardGroupName,
         @PathVariable("postId") Long postId,
         @PathVariable("commentId") Long commentId,
         @Valid @RequestBody CreateCommentRequest createCommentRequest
    ) {
        return getDelegate().createBoardGroupPostCommentReply(stockCode, boardGroupName, postId, commentId, createCommentRequest);
    }


    /**
     * GET /api/stocks/{stockCode}/board-groups/{boardGroupName}/posts/{postId}/comments/{commentId}/replies : 댓글의 답글 목록 조회
     *
     * @param stockCode Stock code parameter (required)
     * @param boardGroupName Board group name parameter (required)
     * @param postId Post ID parameter (required)
     * @param commentId Comment ID parameter (required)
     * @param page Page number (optional, default to 1)
     * @param size Number of items per page (optional, default to 10)
     * @param sorts Sorting criteria (optional, default to createdAt:desc)
     * @return Successful response (status code 200)
     *         or Forbidden (status code 403)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/stocks/{stockCode}/board-groups/{boardGroupName}/posts/{postId}/comments/{commentId}/replies",
        produces = { "application/json" }
    )
    default ResponseEntity<CommentPagingResponse> getBoardGroupPostCommentsReplies(
         @PathVariable("stockCode") String stockCode,
         @PathVariable("boardGroupName") String boardGroupName,
         @PathVariable("postId") Long postId,
         @PathVariable("commentId") Long commentId,
         @Valid @RequestParam(value = "page", required = false, defaultValue = "1") Integer page,
         @Valid @RequestParam(value = "size", required = false, defaultValue = "10") Integer size,
         @Valid @RequestParam(value = "sorts", required = false, defaultValue = "createdAt:desc") List<String> sorts
    ) {
        return getDelegate().getBoardGroupPostCommentsReplies(stockCode, boardGroupName, postId, commentId, page, size, sorts);
    }

}
