/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ag.act.api;

import ag.act.model.AddRoleToUserRequest;
import ag.act.model.UserDataResponse;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;
import jakarta.validation.*;
import ag.act.validation.constraints.*;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-02-13T06:43:13.649172+09:00[Asia/Seoul]")
@Validated
public interface AdminUserRoleApi {

    default AdminUserRoleApiDelegate getDelegate() {
        return new AdminUserRoleApiDelegate() {};
    }

    /**
     * PATCH /api/admin/users/{userId}/add-role : Add role to the user
     *
     * @param userId User ID parameter (required)
     * @param addRoleToUserRequest  (required)
     * @return Successful response (status code 200)
     */
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/api/admin/users/{userId}/add-role",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<UserDataResponse> addRoleToUser(
         @PathVariable("userId") Long userId,
         @Valid @RequestBody AddRoleToUserRequest addRoleToUserRequest
    ) {
        return getDelegate().addRoleToUser(userId, addRoleToUserRequest);
    }


    /**
     * POST /api/admin/users/{userId}/assign-admin : Assign admin to user
     *
     * @param userId User ID parameter (required)
     * @return Successful response (status code 200)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/admin/users/{userId}/assign-admin",
        produces = { "application/json" }
    )
    default ResponseEntity<UserDataResponse> assignAdminToUser(
         @PathVariable("userId") Long userId
    ) {
        return getDelegate().assignAdminToUser(userId);
    }


    /**
     * POST /api/admin/users/{userId}/revoke-admin : 어드민 사용자를 일반 사용자로 변경
     *
     * @param userId User ID parameter (required)
     * @return Successful response (status code 200)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/admin/users/{userId}/revoke-admin",
        produces = { "application/json" }
    )
    default ResponseEntity<UserDataResponse> revokeAdminToUser(
         @PathVariable("userId") Long userId
    ) {
        return getDelegate().revokeAdminToUser(userId);
    }

}
