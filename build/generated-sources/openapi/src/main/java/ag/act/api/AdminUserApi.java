/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ag.act.api;

import ag.act.model.EditUserNicknameRequest;
import ag.act.model.ErrorResponse;
import ag.act.model.GetUserResponse;
import ag.act.model.SimpleStringResponse;
import ag.act.model.UserDataResponse;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;
import jakarta.validation.*;
import ag.act.validation.constraints.*;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-02-13T06:43:13.649172+09:00[Asia/Seoul]")
@Validated
public interface AdminUserApi {

    default AdminUserApiDelegate getDelegate() {
        return new AdminUserApiDelegate() {};
    }

    /**
     * PATCH /api/admin/users/{userId}/nickname : edit user&#39;s nickname by admin
     *
     * @param userId User ID parameter (required)
     * @param editUserNicknameRequest  (required)
     * @return Successful response (status code 200)
     *         or Bad Request (status code 400)
     */
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/api/admin/users/{userId}/nickname",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<UserDataResponse> editUserNickname(
         @PathVariable("userId") Long userId,
         @Valid @RequestBody EditUserNicknameRequest editUserNicknameRequest
    ) {
        return getDelegate().editUserNickname(userId, editUserNicknameRequest);
    }


    /**
     * GET /api/admin/users/{userId} : Details of User
     *
     * @param userId User ID parameter (required)
     * @return Successful response (status code 200)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/admin/users/{userId}",
        produces = { "application/json" }
    )
    default ResponseEntity<UserDataResponse> getUserDetailsAdmin(
         @PathVariable("userId") Long userId
    ) {
        return getDelegate().getUserDetailsAdmin(userId);
    }


    /**
     * GET /api/admin/users : CMS 사용자 목록 조회하기
     *
     * @param filterType UserFilterType - ALL(전체), ADMIN(어드민), SOLIDARITY_LEADER(주주대표), ACCEPTOR_USER(수임인) (optional)
     * @param searchType UserSearchType - NAME(이름), USER_ID(사용자 아이디), NICKNAME(닉네임), PHONE_NUMBER(휴대폰번호), EMAIL(이메일) (optional)
     * @param searchKeyword Search keyword (optional)
     * @param page Page number (optional, default to 1)
     * @param size Number of items per page (optional, default to 10)
     * @param sorts Sorting criteria (optional, default to createdAt:desc)
     * @return Successful response (status code 200)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/admin/users",
        produces = { "application/json" }
    )
    default ResponseEntity<GetUserResponse> getUsers(
         @Valid @RequestParam(value = "filterType", required = false) String filterType,
         @Valid @RequestParam(value = "searchType", required = false) String searchType,
         @Valid @RequestParam(value = "searchKeyword", required = false) String searchKeyword,
         @Valid @RequestParam(value = "page", required = false, defaultValue = "1") Integer page,
         @Valid @RequestParam(value = "size", required = false, defaultValue = "10") Integer size,
         @Valid @RequestParam(value = "sorts", required = false, defaultValue = "createdAt:desc") List<String> sorts
    ) {
        return getDelegate().getUsers(filterType, searchType, searchKeyword, page, size, sorts);
    }


    /**
     * DELETE /api/admin/users/mydata/withdraw/{finpongAccessToken} : 마이데이터 토큰으로 마이데이터 탈퇴하기
     *
     * @param finpongAccessToken Mydata token parameter (required)
     * @return Successful response (status code 200)
     */
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/admin/users/mydata/withdraw/{finpongAccessToken}",
        produces = { "application/json" }
    )
    default ResponseEntity<SimpleStringResponse> withdrawMyDataWithToken(
         @PathVariable("finpongAccessToken") String finpongAccessToken
    ) {
        return getDelegate().withdrawMyDataWithToken(finpongAccessToken);
    }

}
