/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ag.act.api;

import ag.act.model.DeleteSolidarityApplicantRequest;
import ag.act.model.ErrorResponse;
import ag.act.model.SimpleStringResponse;
import ag.act.model.SolidarityLeaderApplicationResponse;
import ag.act.model.WithdrawSolidarityLeaderApplicantRequest;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;
import jakarta.validation.*;
import ag.act.validation.constraints.*;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-02-13T06:43:13.649172+09:00[Asia/Seoul]")
@Validated
public interface AdminSolidarityLeaderApplicantApi {

    default AdminSolidarityLeaderApplicantApiDelegate getDelegate() {
        return new AdminSolidarityLeaderApplicantApiDelegate() {};
    }

    /**
     * DELETE /api/admin/solidarity-leader-applicants/{solidarityId} : CMS 종목 유저의 주주대표 지원자 삭제하기
     *
     * @param solidarityId Solidarity Id (required)
     * @param deleteSolidarityApplicantRequest  (required)
     * @return Successful response (status code 200)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/admin/solidarity-leader-applicants/{solidarityId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SimpleStringResponse> deleteSolidarityLeaderApplicant(
         @PathVariable("solidarityId") Long solidarityId,
         @Valid @RequestBody DeleteSolidarityApplicantRequest deleteSolidarityApplicantRequest
    ) {
        return getDelegate().deleteSolidarityLeaderApplicant(solidarityId, deleteSolidarityApplicantRequest);
    }


    /**
     * GET /api/admin/stocks/{stockCode}/solidarity-leader-elections/{solidarityLeaderElectionId}/solidarity-leader-applicants/{solidarityLeaderApplicantId} : CMS용 주주대표 선출 공약 조회
     *
     * @param stockCode Stock code parameter (required)
     * @param solidarityLeaderElectionId Solidarity Leader Election ID parameter (required)
     * @param solidarityLeaderApplicantId Solidarity Leader Applicant ID parameter (required)
     * @return Successful response (status code 200)
     *         or Not Found (status code 404)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/admin/stocks/{stockCode}/solidarity-leader-elections/{solidarityLeaderElectionId}/solidarity-leader-applicants/{solidarityLeaderApplicantId}",
        produces = { "application/json" }
    )
    default ResponseEntity<SolidarityLeaderApplicationResponse> getSolidarityLeaderApplicant(
         @PathVariable("stockCode") String stockCode,
         @PathVariable("solidarityLeaderElectionId") Long solidarityLeaderElectionId,
         @PathVariable("solidarityLeaderApplicantId") Long solidarityLeaderApplicantId
    ) {
        return getDelegate().getSolidarityLeaderApplicant(stockCode, solidarityLeaderElectionId, solidarityLeaderApplicantId);
    }


    /**
     * POST /api/admin/stocks/{stockCode}/solidarity-leader-applicants/{solidarityLeaderApplicantId}/withdraw : 관리자가 지원자의 지원을 철회한다.
     *
     * @param stockCode 종목 코드 (required)
     * @param solidarityLeaderApplicantId 지원서 ID (required)
     * @param withdrawSolidarityLeaderApplicantRequest  (required)
     * @return Successful response (status code 200)
     *         or Bad Request (status code 400)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/admin/stocks/{stockCode}/solidarity-leader-applicants/{solidarityLeaderApplicantId}/withdraw",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SimpleStringResponse> withdrawSolidarityLeaderApplicant(
         @PathVariable("stockCode") String stockCode,
         @PathVariable("solidarityLeaderApplicantId") Long solidarityLeaderApplicantId,
         @Valid @RequestBody WithdrawSolidarityLeaderApplicantRequest withdrawSolidarityLeaderApplicantRequest
    ) {
        return getDelegate().withdrawSolidarityLeaderApplicant(stockCode, solidarityLeaderApplicantId, withdrawSolidarityLeaderApplicantRequest);
    }

}
