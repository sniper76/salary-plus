/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ag.act.api;

import ag.act.model.CreatePostRequest;
import org.springframework.format.annotation.DateTimeFormat;
import ag.act.model.ErrorResponse;
import ag.act.model.GetBoardGroupPostResponse;
import java.time.OffsetDateTime;
import ag.act.model.PostDetailsDataResponse;
import ag.act.model.SimpleStringResponse;
import ag.act.model.UpdatePostRequest;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;
import jakarta.validation.*;
import ag.act.validation.constraints.*;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-02-13T06:43:13.649172+09:00[Asia/Seoul]")
@Validated
public interface AdminBoardGroupPostApi {

    default AdminBoardGroupPostApiDelegate getDelegate() {
        return new AdminBoardGroupPostApiDelegate() {};
    }

    /**
     * POST /api/admin/stocks/{stockCode}/board-groups/{boardGroupName}/posts : CMS 공통 게시글/액션/토론방 생성하기
     *
     * @param stockCode Stock code parameter (required)
     * @param boardGroupName BoardGroup ACTION or ANALYSIS or DEBATE or GLOBALBOARD (required)
     * @param createPostRequest  (required)
     * @return Successful response (status code 200)
     *         or Board group of the category does not match (status code 400)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/admin/stocks/{stockCode}/board-groups/{boardGroupName}/posts",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<PostDetailsDataResponse> createPost(
         @PathVariable("stockCode") String stockCode,
         @PathVariable("boardGroupName") String boardGroupName,
         @Valid @RequestBody CreatePostRequest createPostRequest
    ) {
        return getDelegate().createPost(stockCode, boardGroupName, createPostRequest);
    }


    /**
     * DELETE /api/admin/stocks/{stockCode}/board-groups/{boardGroupName}/posts/{postId} : CMS 공통 게시글/액션/토론방 삭제하기
     *
     * @param stockCode Stock code parameter (required)
     * @param boardGroupName BoardGroup ACTION or ANALYSIS or DEBATE or GLOBALBOARD (required)
     * @param postId Post ID (required)
     * @return Successful (status code 200)
     *         or Board group of the category does not match (status code 400)
     *         or Not Found (status code 404)
     */
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/admin/stocks/{stockCode}/board-groups/{boardGroupName}/posts/{postId}",
        produces = { "application/json" }
    )
    default ResponseEntity<SimpleStringResponse> deletePost(
         @PathVariable("stockCode") String stockCode,
         @PathVariable("boardGroupName") String boardGroupName,
         @PathVariable("postId") Long postId
    ) {
        return getDelegate().deletePost(stockCode, boardGroupName, postId);
    }


    /**
     * GET /api/admin/stocks/{stockCode}/board-groups/{boardGroupName}/posts/{postId} : CMS 공통 게시글/액션/토론방 상세 조회하기
     *
     * @param stockCode Stock code parameter (required)
     * @param boardGroupName BoardGroup ACTION or ANALYSIS or DEBATE or GLOBALBOARD (required)
     * @param postId Post ID (required)
     * @return Successful response (status code 200)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/admin/stocks/{stockCode}/board-groups/{boardGroupName}/posts/{postId}",
        produces = { "application/json" }
    )
    default ResponseEntity<PostDetailsDataResponse> getPostDetails(
         @PathVariable("stockCode") String stockCode,
         @PathVariable("boardGroupName") String boardGroupName,
         @PathVariable("postId") Long postId
    ) {
        return getDelegate().getPostDetails(stockCode, boardGroupName, postId);
    }


    /**
     * GET /api/admin/board-groups/{boardGroup}/posts : CMS 공통 게시글/액션/토론방 목록 조회하기
     *
     * @param boardGroup BoardGroup ACTION or ANALYSIS or DEBATE or GLOBALBOARD (required)
     * @param boardCategory BoardCategory (optional)
     * @param searchType PostSearchType (STOCK_CODE / TITLE / CONTENT / TITLE_AND_CONTENT) (optional)
     * @param searchKeyword Search keyword for title or stockCode for stock (optional)
     * @param searchStartDate Search start date for post created date (optional)
     * @param searchEndDate Search end date for post created date (optional)
     * @param status Status of the post (ACTIVE, DELETED_BY_USER, DELETED_BY_ADMIN or ALL) (optional)
     * @param page Page number (optional, default to 1)
     * @param size Number of items per page (optional, default to 10)
     * @param sorts Sorting criteria (optional, default to createdAt:desc)
     * @return Successful response (status code 200)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/admin/board-groups/{boardGroup}/posts",
        produces = { "application/json" }
    )
    default ResponseEntity<GetBoardGroupPostResponse> getPosts(
         @PathVariable("boardGroup") String boardGroup,
         @Valid @RequestParam(value = "boardCategory", required = false) String boardCategory,
         @Valid @RequestParam(value = "searchType", required = false) String searchType,
         @Valid @RequestParam(value = "searchKeyword", required = false) String searchKeyword,
         @Valid @RequestParam(value = "searchStartDate", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) java.time.Instant searchStartDate,
         @Valid @RequestParam(value = "searchEndDate", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) java.time.Instant searchEndDate,
         @Valid @RequestParam(value = "status", required = false) String status,
         @Valid @RequestParam(value = "page", required = false, defaultValue = "1") Integer page,
         @Valid @RequestParam(value = "size", required = false, defaultValue = "10") Integer size,
         @Valid @RequestParam(value = "sorts", required = false, defaultValue = "createdAt:desc") List<String> sorts
    ) {
        return getDelegate().getPosts(boardGroup, boardCategory, searchType, searchKeyword, searchStartDate, searchEndDate, status, page, size, sorts);
    }


    /**
     * PATCH /api/admin/stocks/{stockCode}/board-groups/{boardGroupName}/posts/{postId} : CMS 공통 게시글/액션/토론방 수정하기
     *
     * @param stockCode Stock code parameter (required)
     * @param boardGroupName BoardGroup ACTION or ANALYSIS or DEBATE or GLOBALBOARD (required)
     * @param postId Post ID (required)
     * @param updatePostRequest  (required)
     * @return Successful response (status code 200)
     *         or Board group of the category does not match (status code 400)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/api/admin/stocks/{stockCode}/board-groups/{boardGroupName}/posts/{postId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<PostDetailsDataResponse> updatePost(
         @PathVariable("stockCode") String stockCode,
         @PathVariable("boardGroupName") String boardGroupName,
         @PathVariable("postId") Long postId,
         @Valid @RequestBody UpdatePostRequest updatePostRequest
    ) {
        return getDelegate().updatePost(stockCode, boardGroupName, postId, updatePostRequest);
    }

}
