/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ag.act.api;

import ag.act.model.ErrorResponse;
import ag.act.model.GetPostDigitalDocumentDataResponse;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;
import jakarta.validation.*;
import ag.act.validation.constraints.*;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-02-13T06:43:13.649172+09:00[Asia/Seoul]")
@Validated
public interface AdminAcceptorDigitalDocumentApi {

    default AdminAcceptorDigitalDocumentApiDelegate getDelegate() {
        return new AdminAcceptorDigitalDocumentApiDelegate() {};
    }

    /**
     * GET /api/admin/acceptors/digital-document/{digitalDocumentType} : CMS 로그인한 수임인의 의결권위임 리스트
     *
     * @param digitalDocumentType Digital Document Type parameter (DIGITAL_PROXY) (required)
     * @param searchType PostSearchType (TITLE) (optional)
     * @param searchKeyword Search keyword for post title (optional)
     * @param page Page number (optional, default to 1)
     * @param size Number of items per page (optional, default to 10)
     * @param sorts Sorting criteria (optional, default to createdAt:desc)
     * @return Digital Documents (status code 200)
     *         or Internal Server Error (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/admin/acceptors/digital-document/{digitalDocumentType}",
        produces = { "application/json" }
    )
    default ResponseEntity<GetPostDigitalDocumentDataResponse> getDigitalDocumentPostsByAcceptor(
         @PathVariable("digitalDocumentType") String digitalDocumentType,
         @Valid @RequestParam(value = "searchType", required = false) String searchType,
         @Valid @RequestParam(value = "searchKeyword", required = false) String searchKeyword,
         @Valid @RequestParam(value = "page", required = false, defaultValue = "1") Integer page,
         @Valid @RequestParam(value = "size", required = false, defaultValue = "10") Integer size,
         @Valid @RequestParam(value = "sorts", required = false, defaultValue = "createdAt:desc") List<String> sorts
    ) {
        return getDelegate().getDigitalDocumentPostsByAcceptor(digitalDocumentType, searchType, searchKeyword, page, size, sorts);
    }

}
