/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ag.act.api;

import ag.act.model.ErrorResponse;
import ag.act.model.GetReportResponse;
import ag.act.model.ReportDetailResponse;
import ag.act.model.UpdateReportStatusRequest;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;
import jakarta.validation.*;
import ag.act.validation.constraints.*;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-02-13T06:43:13.649172+09:00[Asia/Seoul]")
@Validated
public interface AdminReportApi {

    default AdminReportApiDelegate getDelegate() {
        return new AdminReportApiDelegate() {};
    }

    /**
     * GET /api/admin/{reportType}/reports/{reportId} : 신고 상세 조회하기
     *
     * @param reportType Report type code parameter POST or COMMENT (required)
     * @param reportId Report ID (required)
     * @return Successful response (status code 200)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/admin/{reportType}/reports/{reportId}",
        produces = { "application/json" }
    )
    default ResponseEntity<ReportDetailResponse> getReportDetail(
         @PathVariable("reportType") String reportType,
         @PathVariable("reportId") Long reportId
    ) {
        return getDelegate().getReportDetail(reportType, reportId);
    }


    /**
     * GET /api/admin/{reportType}/reports : 신고 목록 조회하기
     *
     * @param reportType Report type code parameter POST or COMMENT (required)
     * @param page Page number (required)
     * @param size Number of items per page (required)
     * @param reportStatus Report status code parameter (optional)
     * @param sorts Sorting criteria (optional, default to createdAt:desc)
     * @return Successful response (status code 200)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/admin/{reportType}/reports",
        produces = { "application/json" }
    )
    default ResponseEntity<GetReportResponse> getReports(
         @PathVariable("reportType") String reportType,
        @NotNull  @Valid @RequestParam(value = "page", required = true, defaultValue = "1") Integer page,
        @NotNull  @Valid @RequestParam(value = "size", required = true, defaultValue = "10") Integer size,
         @Valid @RequestParam(value = "reportStatus", required = false) String reportStatus,
         @Valid @RequestParam(value = "sorts", required = false, defaultValue = "createdAt:desc") List<String> sorts
    ) {
        return getDelegate().getReports(reportType, page, size, reportStatus, sorts);
    }


    /**
     * PATCH /api/admin/{reportType}/reports/{reportId} : 신고 컨텐츠 처리하기
     *
     * @param reportType Report type code parameter POST or COMMENT (required)
     * @param reportId Report ID (required)
     * @param updateReportStatusRequest  (required)
     * @return Successful response (status code 200)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/api/admin/{reportType}/reports/{reportId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ReportDetailResponse> updateReportStatus(
         @PathVariable("reportType") String reportType,
         @PathVariable("reportId") Long reportId,
         @Valid @RequestBody UpdateReportStatusRequest updateReportStatusRequest
    ) {
        return getDelegate().updateReportStatus(reportType, reportId, updateReportStatusRequest);
    }

}
