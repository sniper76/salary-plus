/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ag.act.api;

import ag.act.model.BatchRequest;
import ag.act.model.ErrorResponse;
import ag.act.model.SimpleStringResponse;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;
import jakarta.validation.*;
import ag.act.validation.constraints.*;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-02-13T06:43:13.649172+09:00[Asia/Seoul]")
@Validated
public interface BatchApi {

    default BatchApiDelegate getDelegate() {
        return new BatchApiDelegate() {};
    }

    /**
     * POST /api/batch/cleanup/unfinished-batches
     *
     * @param xApiKey Authorization header for batch (required)
     * @param batchRequest  (required)
     * @return Success (status code 200)
     *         or Internal Server Error (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/batch/cleanup/unfinished-batches",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SimpleStringResponse> cleanupUnfinishedBatches(
        @NotNull  @RequestHeader(value = "x-api-key", required = true) String xApiKey,
         @Valid @RequestBody BatchRequest batchRequest
    ) {
        return getDelegate().cleanupUnfinishedBatches(xApiKey, batchRequest);
    }


    /**
     * POST /api/batch/cleanup/unfinished-digital-document-users
     *
     * @param xApiKey Authorization header for batch (required)
     * @param batchRequest  (required)
     * @return Success (status code 200)
     *         or Internal Server Error (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/batch/cleanup/unfinished-digital-document-users",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SimpleStringResponse> cleanupUnfinishedDigitalDocumentUsers(
        @NotNull  @RequestHeader(value = "x-api-key", required = true) String xApiKey,
         @Valid @RequestBody BatchRequest batchRequest
    ) {
        return getDelegate().cleanupUnfinishedDigitalDocumentUsers(xApiKey, batchRequest);
    }


    /**
     * POST /api/batch/digital-document/zip-file-request
     *
     * @param xApiKey Authorization header for batch (required)
     * @param batchRequest  (required)
     * @return Success (status code 200)
     *         or Internal Server Error (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/batch/digital-document/zip-file-request",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SimpleStringResponse> createDigitalDocumentZipFiles(
        @NotNull  @RequestHeader(value = "x-api-key", required = true) String xApiKey,
         @Valid @RequestBody BatchRequest batchRequest
    ) {
        return getDelegate().createDigitalDocumentZipFiles(xApiKey, batchRequest);
    }


    /**
     * POST /api/batch/create-solidarity-daily-statistics
     *
     * @param xApiKey Authorization header for batch (required)
     * @param batchRequest  (required)
     * @return Success (status code 200)
     *         or Internal Server Error (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/batch/create-solidarity-daily-statistics",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SimpleStringResponse> createSolidarityDailyStatistics(
        @NotNull  @RequestHeader(value = "x-api-key", required = true) String xApiKey,
         @Valid @RequestBody BatchRequest batchRequest
    ) {
        return getDelegate().createSolidarityDailyStatistics(xApiKey, batchRequest);
    }


    /**
     * POST /api/batch/create-solidarity-daily-summaries
     *
     * @param xApiKey Authorization header for batch (required)
     * @param batchRequest  (required)
     * @return Success (status code 200)
     *         or Internal Server Error (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/batch/create-solidarity-daily-summaries",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SimpleStringResponse> createSolidarityDailySummaries(
        @NotNull  @RequestHeader(value = "x-api-key", required = true) String xApiKey,
         @Valid @RequestBody BatchRequest batchRequest
    ) {
        return getDelegate().createSolidarityDailySummaries(xApiKey, batchRequest);
    }


    /**
     * POST /api/batch/stock-rankings
     *
     * @param xApiKey Authorization header for batch (required)
     * @param batchRequest  (required)
     * @return Success (status code 200)
     *         or Internal Server Error (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/batch/stock-rankings",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SimpleStringResponse> createStockRanking(
        @NotNull  @RequestHeader(value = "x-api-key", required = true) String xApiKey,
         @Valid @RequestBody BatchRequest batchRequest
    ) {
        return getDelegate().createStockRanking(xApiKey, batchRequest);
    }


    /**
     * POST /api/batch/user-holding-stocks-histories
     *
     * @param xApiKey Authorization header for batch (required)
     * @param batchRequest  (required)
     * @return Success (status code 200)
     *         or Internal Server Error (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/batch/user-holding-stocks-histories",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SimpleStringResponse> createUserHoldingStocksHistories(
        @NotNull  @RequestHeader(value = "x-api-key", required = true) String xApiKey,
         @Valid @RequestBody BatchRequest batchRequest
    ) {
        return getDelegate().createUserHoldingStocksHistories(xApiKey, batchRequest);
    }


    /**
     * POST /api/batch/data-matrices/user-retention-weekly/{formattedCsvDataType} : CreateCsv_모든 유저별 주차별 리텐션|전자문서참여기회지표|전자문서참여기회지표(기타문서X)
     *
     * @param xApiKey Authorization header for batch (required)
     * @param formattedCsvDataType User Retention Weekly CSV Data Type (converted LowerCase and &#39;_&#39;) (required)
     * @param batchRequest  (required)
     * @return Success (status code 200)
     *         or Internal Server Error (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/batch/data-matrices/user-retention-weekly/{formattedCsvDataType}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SimpleStringResponse> createUserRetentionWeeklyCsv(
        @NotNull  @RequestHeader(value = "x-api-key", required = true) String xApiKey,
         @PathVariable("formattedCsvDataType") String formattedCsvDataType,
         @Valid @RequestBody BatchRequest batchRequest
    ) {
        return getDelegate().createUserRetentionWeeklyCsv(xApiKey, formattedCsvDataType, batchRequest);
    }


    /**
     * POST /api/batch/digital-document/delete-old-documents
     *
     * @param xApiKey Authorization header for batch (required)
     * @param batchRequest  (required)
     * @return Success (status code 200)
     *         or Internal Server Error (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/batch/digital-document/delete-old-documents",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SimpleStringResponse> deleteOldDigitalDocuments(
        @NotNull  @RequestHeader(value = "x-api-key", required = true) String xApiKey,
         @Valid @RequestBody BatchRequest batchRequest
    ) {
        return getDelegate().deleteOldDigitalDocuments(xApiKey, batchRequest);
    }


    /**
     * POST /api/batch/maintenance/solidarity-leader-elections
     *
     * @param xApiKey Authorization header for batch (required)
     * @param batchRequest  (required)
     * @return Success (status code 200)
     *         or Internal Server Error (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/batch/maintenance/solidarity-leader-elections",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SimpleStringResponse> maintainSolidarityLeaderElections(
        @NotNull  @RequestHeader(value = "x-api-key", required = true) String xApiKey,
         @Valid @RequestBody BatchRequest batchRequest
    ) {
        return getDelegate().maintainSolidarityLeaderElections(xApiKey, batchRequest);
    }


    /**
     * POST /api/batch/dashboard/statistics
     *
     * @param xApiKey Authorization header for batch (required)
     * @param batchRequest  (required)
     * @return Success (status code 200)
     *         or Internal Server Error (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/batch/dashboard/statistics",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SimpleStringResponse> processDashboardStatistics(
        @NotNull  @RequestHeader(value = "x-api-key", required = true) String xApiKey,
         @Valid @RequestBody BatchRequest batchRequest
    ) {
        return getDelegate().processDashboardStatistics(xApiKey, batchRequest);
    }


    /**
     * POST /api/batch/send-pushes
     *
     * @param xApiKey Authorization header for batch (required)
     * @param batchRequest  (required)
     * @return Success (status code 200)
     *         or Internal Server Error (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/batch/send-pushes",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SimpleStringResponse> sendPushes(
        @NotNull  @RequestHeader(value = "x-api-key", required = true) String xApiKey,
         @Valid @RequestBody BatchRequest batchRequest
    ) {
        return getDelegate().sendPushes(xApiKey, batchRequest);
    }


    /**
     * POST /api/batch/dart/update-corp-codes
     *
     * @param xApiKey Authorization header for batch (required)
     * @param batchRequest  (required)
     * @return Success (status code 200)
     *         or Internal Server Error (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/batch/dart/update-corp-codes",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SimpleStringResponse> updateCorpCodes(
        @NotNull  @RequestHeader(value = "x-api-key", required = true) String xApiKey,
         @Valid @RequestBody BatchRequest batchRequest
    ) {
        return getDelegate().updateCorpCodes(xApiKey, batchRequest);
    }


    /**
     * POST /api/batch/update-solidarity-daily-summaries
     *
     * @param xApiKey Authorization header for batch (required)
     * @param batchRequest  (required)
     * @return Success (status code 200)
     *         or Internal Server Error (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/batch/update-solidarity-daily-summaries",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SimpleStringResponse> updateSolidarityDailySummaries(
        @NotNull  @RequestHeader(value = "x-api-key", required = true) String xApiKey,
         @Valid @RequestBody BatchRequest batchRequest
    ) {
        return getDelegate().updateSolidarityDailySummaries(xApiKey, batchRequest);
    }


    /**
     * POST /api/batch/dart/update-stock-dark-corporations : DART Corp 기업 정보 업데이트
     *
     * @param xApiKey Authorization header for batch (required)
     * @param batchRequest  (required)
     * @return Success (status code 200)
     *         or Internal Server Error (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/batch/dart/update-stock-dark-corporations",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SimpleStringResponse> updateStockDartCorporations(
        @NotNull  @RequestHeader(value = "x-api-key", required = true) String xApiKey,
         @Valid @RequestBody BatchRequest batchRequest
    ) {
        return getDelegate().updateStockDartCorporations(xApiKey, batchRequest);
    }


    /**
     * POST /api/batch/update-stocks
     *
     * @param xApiKey Authorization header for batch (required)
     * @param batchRequest  (required)
     * @return Success (status code 200)
     *         or Internal Server Error (status code 500)
     *         or Service Unavailable (status code 503)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/batch/update-stocks",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SimpleStringResponse> updateStocks(
        @NotNull  @RequestHeader(value = "x-api-key", required = true) String xApiKey,
         @Valid @RequestBody BatchRequest batchRequest
    ) {
        return getDelegate().updateStocks(xApiKey, batchRequest);
    }


    /**
     * POST /api/batch/update-stocks-from-dart-corporations
     *
     * @param xApiKey Authorization header for batch (required)
     * @param batchRequest  (required)
     * @return Success (status code 200)
     *         or Internal Server Error (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/batch/update-stocks-from-dart-corporations",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SimpleStringResponse> updateStocksFromDartCorporations(
        @NotNull  @RequestHeader(value = "x-api-key", required = true) String xApiKey,
         @Valid @RequestBody BatchRequest batchRequest
    ) {
        return getDelegate().updateStocksFromDartCorporations(xApiKey, batchRequest);
    }


    /**
     * POST /api/batch/qa/test-stocks
     *
     * @param xApiKey Authorization header for batch (required)
     * @param batchRequest  (required)
     * @return Success (status code 200)
     *         or Internal Server Error (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/batch/qa/test-stocks",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SimpleStringResponse> updateTestStocks(
        @NotNull  @RequestHeader(value = "x-api-key", required = true) String xApiKey,
         @Valid @RequestBody BatchRequest batchRequest
    ) {
        return getDelegate().updateTestStocks(xApiKey, batchRequest);
    }


    /**
     * POST /api/batch/update-withdrawal-request-users
     *
     * @param xApiKey Authorization header for batch (required)
     * @param batchRequest  (required)
     * @return Success (status code 200)
     *         or Internal Server Error (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/batch/update-withdrawal-request-users",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SimpleStringResponse> updateWithdrawalRequestUsers(
        @NotNull  @RequestHeader(value = "x-api-key", required = true) String xApiKey,
         @Valid @RequestBody BatchRequest batchRequest
    ) {
        return getDelegate().updateWithdrawalRequestUsers(xApiKey, batchRequest);
    }

}
