/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ag.act.api;

import ag.act.model.ErrorResponse;
import ag.act.model.SimpleStringResponse;
import ag.act.model.UserDigitalDocumentResponse;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;
import jakarta.validation.*;
import ag.act.validation.constraints.*;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-02-13T06:43:13.649172+09:00[Asia/Seoul]")
@Validated
public interface UserDigitalDocumentApi {

    default UserDigitalDocumentApiDelegate getDelegate() {
        return new UserDigitalDocumentApiDelegate() {};
    }

    /**
     * POST /api/users/digital-document/{digitalDocumentId} : 유저의 전자문서 서명하기
     *
     * @param digitalDocumentId Digital Document ID parameter (required)
     * @param signImage 서명 이미지 (optional)
     * @param idCardImage 신분증 이미지 (optional)
     * @param bankAccountImages  (optional)
     * @param hectoEncryptedBankAccountPdf 암호화된 헥토측 잔고증명서 pdf 파일 (optional)
     * @param answerData  (optional)
     * @return Digital Document Files uploaded successfully (status code 200)
     *         or Bad Request. Invalid file format or data. (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/users/digital-document/{digitalDocumentId}",
        produces = { "application/json" },
        consumes = { "multipart/form-data" }
    )
    default ResponseEntity<UserDigitalDocumentResponse> createUserDigitalDocumentWithImage(
         @PathVariable("digitalDocumentId") Long digitalDocumentId,
         @RequestPart(value = "signImage", required = false) MultipartFile signImage,
         @RequestPart(value = "idCardImage", required = false) MultipartFile idCardImage,
         @RequestPart(value = "bankAccountImages", required = false) List<MultipartFile> bankAccountImages,
         @RequestPart(value = "hectoEncryptedBankAccountPdf", required = false) MultipartFile hectoEncryptedBankAccountPdf,
         @Valid @RequestParam(value = "answerData", required = false) String answerData
    ) {
        return getDelegate().createUserDigitalDocumentWithImage(digitalDocumentId, signImage, idCardImage, bankAccountImages, hectoEncryptedBankAccountPdf, answerData);
    }


    /**
     * DELETE /api/users/digital-document/{digitalDocumentId} : 전자문서 사용자별 삭제
     *
     * @param digitalDocumentId Digital Document ID parameter (required)
     * @return Digital Document delete successfully (status code 200)
     *         or Bad Request. Invalid data. (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/users/digital-document/{digitalDocumentId}",
        produces = { "application/json" }
    )
    default ResponseEntity<SimpleStringResponse> deleteUserDigitalDocument(
         @PathVariable("digitalDocumentId") Long digitalDocumentId
    ) {
        return getDelegate().deleteUserDigitalDocument(digitalDocumentId);
    }


    /**
     * GET /api/users/digital-document/{digitalDocumentId}/download-document : 전자문서 사용자별 pdf 다운로드
     *
     * @param digitalDocumentId Digital Document ID parameter (required)
     * @return Digital Document Files downloaded successfully (status code 200)
     *         or Bad Request. Invalid file format or data. (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/users/digital-document/{digitalDocumentId}/download-document",
        produces = { "application/octet-stream", "application/json" }
    )
    default ResponseEntity<org.springframework.core.io.Resource> getUserDigitalDocumentPdf(
         @PathVariable("digitalDocumentId") Long digitalDocumentId
    ) {
        return getDelegate().getUserDigitalDocumentPdf(digitalDocumentId);
    }


    /**
     * PATCH /api/users/digital-document/{digitalDocumentId} : 전자문서 사용자별 제출 상태로 변경
     *
     * @param digitalDocumentId Digital Document ID parameter (required)
     * @return Digital Document Update successfully (status code 200)
     *         or Bad Request. Invalid data. (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/api/users/digital-document/{digitalDocumentId}",
        produces = { "application/json" }
    )
    default ResponseEntity<SimpleStringResponse> updateUserDigitalDocumentStatus(
         @PathVariable("digitalDocumentId") Long digitalDocumentId
    ) {
        return getDelegate().updateUserDigitalDocumentStatus(digitalDocumentId);
    }

}
