/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ag.act.api;

import ag.act.model.GetPopupDataResponse;
import ag.act.model.PopupDataResponse;
import ag.act.model.PopupDetailsDataResponse;
import ag.act.model.PopupRequest;
import ag.act.model.SimpleStringResponse;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;
import jakarta.validation.*;
import ag.act.validation.constraints.*;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-02-13T06:43:13.649172+09:00[Asia/Seoul]")
@Validated
public interface AdminPopupApi {

    default AdminPopupApiDelegate getDelegate() {
        return new AdminPopupApiDelegate() {};
    }

    /**
     * POST /api/admin/popups : 팝업 생성하기
     *
     * @param popupRequest  (required)
     * @return Successful response (status code 200)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/admin/popups",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<PopupDataResponse> createPopup(
         @Valid @RequestBody PopupRequest popupRequest
    ) {
        return getDelegate().createPopup(popupRequest);
    }


    /**
     * DELETE /api/admin/popups/{popupId} : 팝업 삭제하기
     *
     * @param popupId Popup Id (required)
     * @return Successful (status code 200)
     *         or Bad Request (status code 400)
     *         or Not Found (status code 404)
     */
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/admin/popups/{popupId}",
        produces = { "application/json" }
    )
    default ResponseEntity<SimpleStringResponse> deletePopup(
         @PathVariable("popupId") Long popupId
    ) {
        return getDelegate().deletePopup(popupId);
    }


    /**
     * GET /api/admin/popups/{popupId} : 팝업 정보 상세조회
     *
     * @param popupId Popup ID (required)
     * @return Successful (status code 200)
     *         or Bad Request (status code 400)
     *         or Not Found (status code 404)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/admin/popups/{popupId}",
        produces = { "application/json" }
    )
    default ResponseEntity<PopupDetailsDataResponse> getPopupDetailsAdmin(
         @PathVariable("popupId") Long popupId
    ) {
        return getDelegate().getPopupDetailsAdmin(popupId);
    }


    /**
     * GET /api/admin/popups : 팝업 목록 조회하기
     *
     * @param popupStatus 예약중, 게시중, 종료 구분 (READY / PROCESSING / COMPLETE) (optional)
     * @param searchType SearchType (TITLE) (optional)
     * @param searchKeyword Search keyword (optional)
     * @param page Page number (optional, default to 1)
     * @param size Number of items per page (optional, default to 10)
     * @param sorts Sorting criteria (optional, default to createdAt:desc)
     * @return Successful response (status code 200)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/admin/popups",
        produces = { "application/json" }
    )
    default ResponseEntity<GetPopupDataResponse> getPopupsAdmin(
         @Valid @RequestParam(value = "popupStatus", required = false) String popupStatus,
         @Valid @RequestParam(value = "searchType", required = false) String searchType,
         @Valid @RequestParam(value = "searchKeyword", required = false) String searchKeyword,
         @Valid @RequestParam(value = "page", required = false, defaultValue = "1") Integer page,
         @Valid @RequestParam(value = "size", required = false, defaultValue = "10") Integer size,
         @Valid @RequestParam(value = "sorts", required = false, defaultValue = "createdAt:desc") List<String> sorts
    ) {
        return getDelegate().getPopupsAdmin(popupStatus, searchType, searchKeyword, page, size, sorts);
    }


    /**
     * PATCH /api/admin/popups/{popupId} : 팝업 수정하기
     *
     * @param popupId Popup Id (required)
     * @param popupRequest  (required)
     * @return Successful response (status code 200)
     */
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/api/admin/popups/{popupId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<PopupDataResponse> updatePopup(
         @PathVariable("popupId") Long popupId,
         @Valid @RequestBody PopupRequest popupRequest
    ) {
        return getDelegate().updatePopup(popupId, popupRequest);
    }

}
