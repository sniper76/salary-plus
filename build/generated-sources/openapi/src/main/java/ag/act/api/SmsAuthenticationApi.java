/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ag.act.api;

import ag.act.model.AuthUserResponse;
import ag.act.model.ErrorResponse;
import ag.act.model.ResendAuthRequest;
import ag.act.model.ResendAuthResponse;
import ag.act.model.SendAuthRequest;
import ag.act.model.SendAuthResponse;
import ag.act.model.VerifyAuthCodeRequest;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;
import jakarta.validation.*;
import ag.act.validation.constraints.*;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-02-13T06:43:13.649172+09:00[Asia/Seoul]")
@Validated
public interface SmsAuthenticationApi {

    default SmsAuthenticationApiDelegate getDelegate() {
        return new SmsAuthenticationApiDelegate() {};
    }

    /**
     * POST /api/sms/resend-auth-request : Resend Auth Request
     *
     * @param resendAuthRequest  (required)
     * @return Success (status code 200)
     *         or Internal Server Error (status code 500)
     *         or Service Unavailable (status code 503)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/sms/resend-auth-request",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ResendAuthResponse> resendAuthRequest(
         @Valid @RequestBody ResendAuthRequest resendAuthRequest
    ) {
        return getDelegate().resendAuthRequest(resendAuthRequest);
    }


    /**
     * POST /api/sms/send-auth-request
     *
     * @param sendAuthRequest  (required)
     * @return Success (status code 200)
     *         or Internal Server Error (status code 500)
     *         or Service Unavailable (status code 503)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/sms/send-auth-request",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SendAuthResponse> sendAuthRequest(
         @Valid @RequestBody SendAuthRequest sendAuthRequest
    ) {
        return getDelegate().sendAuthRequest(sendAuthRequest);
    }


    /**
     * POST /api/sms/verify-auth-code : Verify Auth Code
     *
     * @param verifyAuthCodeRequest  (required)
     * @return Success (status code 200)
     *         or Internal Server Error (status code 500)
     *         or Service Unavailable (status code 503)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/sms/verify-auth-code",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<AuthUserResponse> verifyAuthCode(
         @Valid @RequestBody VerifyAuthCodeRequest verifyAuthCodeRequest
    ) {
        return getDelegate().verifyAuthCode(verifyAuthCodeRequest);
    }

}
