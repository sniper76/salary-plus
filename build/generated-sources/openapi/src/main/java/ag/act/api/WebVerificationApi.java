/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ag.act.api;

import ag.act.model.ErrorResponse;
import ag.act.model.SimpleStringResponse;
import ag.act.model.VerificationCodeRequest;
import ag.act.model.WebVerificationCodeGenerateRequest;
import ag.act.model.WebVerificationCodeGenerateResponse;
import ag.act.model.WebVerificationCodeRequest;
import ag.act.model.WebVerificationCodeResponse;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;
import jakarta.validation.*;
import ag.act.validation.constraints.*;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-02-13T06:43:13.649172+09:00[Asia/Seoul]")
@Validated
public interface WebVerificationApi {

    default WebVerificationApiDelegate getDelegate() {
        return new WebVerificationApiDelegate() {};
    }

    /**
     * POST /api/auth/web/generate-verification-code : Generate Web Verification Code
     *
     * @param webVerificationCodeGenerateRequest  (required)
     * @return Success (status code 200)
     *         or Unauthorized (status code 401)
     *         or Internal Server Error (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/auth/web/generate-verification-code",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<WebVerificationCodeGenerateResponse> generateWebVerificationCode(
         @Valid @RequestBody WebVerificationCodeGenerateRequest webVerificationCodeGenerateRequest
    ) {
        return getDelegate().generateWebVerificationCode(webVerificationCodeGenerateRequest);
    }


    /**
     * POST /api/auth/web/redeem-verification-code : Redeem Verify Verification Code
     *
     * @param verificationCodeRequest  (required)
     * @return Success (status code 200)
     *         or Unauthorized (status code 401)
     *         or Internal Server Error (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/auth/web/redeem-verification-code",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SimpleStringResponse> redeemWebVerificationCode(
         @Valid @RequestBody VerificationCodeRequest verificationCodeRequest
    ) {
        return getDelegate().redeemWebVerificationCode(verificationCodeRequest);
    }


    /**
     * POST /api/auth/web/verify-verification-code : Verify Web Verification Code
     *
     * @param webVerificationCodeRequest  (required)
     * @return Success (status code 200)
     *         or Unauthorized (status code 401)
     *         or Internal Server Error (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/auth/web/verify-verification-code",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<WebVerificationCodeResponse> verifyWebVerificationCode(
         @Valid @RequestBody WebVerificationCodeRequest webVerificationCodeRequest
    ) {
        return getDelegate().verifyWebVerificationCode(webVerificationCodeRequest);
    }

}
