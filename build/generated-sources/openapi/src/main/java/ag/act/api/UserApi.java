/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ag.act.api;

import ag.act.model.CreateBlockUserRequest;
import ag.act.model.CreateSolidarityLeaderConfidentialAgreementRequest;
import ag.act.model.ErrorResponse;
import ag.act.model.GetAnonymousCountResponse;
import ag.act.model.GetBlockedUserResponse;
import ag.act.model.GetSolidarityLeaderConfidentialAgreementResponse;
import ag.act.model.MyStockAuthenticationResponse;
import ag.act.model.SimpleImageDataResponse;
import ag.act.model.SimpleStringResponse;
import ag.act.model.SimpleUserProfileDataResponse;
import ag.act.model.UpdateMyAddressRequest;
import ag.act.model.UpdateMyAuthTypeRequest;
import ag.act.model.UpdateMyDataRequest;
import ag.act.model.UpdateMyNicknameRequest;
import ag.act.model.UpdateMyProfileImageRequest;
import ag.act.model.UpdateMyProfileRequest;
import ag.act.model.UpdateMyPushTokenRequest;
import ag.act.model.UserDataResponse;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;
import jakarta.validation.*;
import ag.act.validation.constraints.*;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-02-13T06:43:13.649172+09:00[Asia/Seoul]")
@Validated
public interface UserApi {

    default UserApiDelegate getDelegate() {
        return new UserApiDelegate() {};
    }

    /**
     * POST /api/users/me/blocked-users : 사용자 차단하기
     *
     * @param createBlockUserRequest  (required)
     * @return Successful response (status code 200)
     *         or Block user self Or Already blocked user (status code 400)
     *         or Not Found (status code 404)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/users/me/blocked-users",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SimpleStringResponse> blockUser(
         @Valid @RequestBody CreateBlockUserRequest createBlockUserRequest
    ) {
        return getDelegate().blockUser(createBlockUserRequest);
    }


    /**
     * POST /api/users/solidarity-leader-confidential-agreement-document : 주주대표 비밀유지 서약서 제출
     *
     * @param createSolidarityLeaderConfidentialAgreementRequest  (required)
     * @return Successful response (status code 200)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/users/solidarity-leader-confidential-agreement-document",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SimpleStringResponse> createSolidarityLeaderConfidentialAgreementDocument(
         @Valid @RequestBody CreateSolidarityLeaderConfidentialAgreementRequest createSolidarityLeaderConfidentialAgreementRequest
    ) {
        return getDelegate().createSolidarityLeaderConfidentialAgreementDocument(createSolidarityLeaderConfidentialAgreementRequest);
    }


    /**
     * GET /api/users/me/blocked-users : Get users who have been blocked by a user.
     *
     * @param blockedUserType BlockedUserType - ALL(전체), NORMAL_USER(일반 사용자), SOLIDARITY_LEADER(주주대표) (optional)
     * @param page Page number (optional, default to 1)
     * @param size Number of items per page (optional, default to 20)
     * @param sorts Sorting criteria (optional, default to createdAt:asc)
     * @return Successful response (status code 200)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/users/me/blocked-users",
        produces = { "application/json" }
    )
    default ResponseEntity<GetBlockedUserResponse> getBlockedUsers(
         @Valid @RequestParam(value = "blockedUserType", required = false) String blockedUserType,
         @Valid @RequestParam(value = "page", required = false, defaultValue = "1") Integer page,
         @Valid @RequestParam(value = "size", required = false, defaultValue = "20") Integer size,
         @Valid @RequestParam(value = "sorts", required = false, defaultValue = "createdAt:asc") List<String> sorts
    ) {
        return getDelegate().getBlockedUsers(blockedUserType, page, size, sorts);
    }


    /**
     * GET /api/users/me : 내 정보 조회하기
     *
     * @return Success (status code 200)
     *         or Unauthorized (status code 401)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/users/me",
        produces = { "application/json" }
    )
    default ResponseEntity<UserDataResponse> getMe(
        
    ) {
        return getDelegate().getMe();
    }


    /**
     * GET /api/users/me/stocks/{stockCode}/authentication : 주주인증 정보 조회하기
     *
     * @param stockCode Stock code parameter (required)
     * @return Success (status code 200)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/users/me/stocks/{stockCode}/authentication",
        produces = { "application/json" }
    )
    default ResponseEntity<MyStockAuthenticationResponse> getMyStockAuthentication(
         @PathVariable("stockCode") String stockCode
    ) {
        return getDelegate().getMyStockAuthentication(stockCode);
    }


    /**
     * GET /api/users/solidarity-leader-confidential-agreement-document-form : 주주대표 비밀유지 서약서 폼 조회
     *
     * @return Successful response (status code 200)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/users/solidarity-leader-confidential-agreement-document-form",
        produces = { "application/json" }
    )
    default ResponseEntity<GetSolidarityLeaderConfidentialAgreementResponse> getSolidarityLeaderConfidentialAgreementDocumentForm(
        
    ) {
        return getDelegate().getSolidarityLeaderConfidentialAgreementDocumentForm();
    }


    /**
     * GET /api/users/anonymousCount : 사용자의 익명 작성 카운트 조회
     *
     * @return Successful response (status code 200)
     *         or Not Found (status code 404)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/users/anonymousCount",
        produces = { "application/json" }
    )
    default ResponseEntity<GetAnonymousCountResponse> getUserAnonymousCount(
        
    ) {
        return getDelegate().getUserAnonymousCount();
    }


    /**
     * GET /api/users/{userId}/profile : 간단 프로필 조회
     *
     * @param userId User ID parameter (required)
     * @param stockCode Stock code filtering parameter (optional)
     * @return Successful response (status code 200)
     *         or Not Found (status code 404)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/users/{userId}/profile",
        produces = { "application/json" }
    )
    default ResponseEntity<SimpleUserProfileDataResponse> getUserSimpleProfile(
         @PathVariable("userId") Long userId,
         @Valid @RequestParam(value = "stockCode", required = false) String stockCode
    ) {
        return getDelegate().getUserSimpleProfile(userId, stockCode);
    }


    /**
     * POST /api/users/withdrawal : 회원 탈퇴 하기
     *
     * @return Successful response (status code 200)
     *         or Forbidden (status code 403)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/users/withdrawal",
        produces = { "application/json" }
    )
    default ResponseEntity<SimpleStringResponse> requestWithdrawal(
        
    ) {
        return getDelegate().requestWithdrawal();
    }


    /**
     * DELETE /api/users/me/blocked-users/{blockedUserId} : 유저 차단 해제하기
     *
     * @param blockedUserId  (required)
     * @return Successful response (status code 200)
     *         or Unauthorized (status code 401)
     */
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/users/me/blocked-users/{blockedUserId}",
        produces = { "application/json" }
    )
    default ResponseEntity<SimpleStringResponse> unblockUser(
         @PathVariable("blockedUserId") Long blockedUserId
    ) {
        return getDelegate().unblockUser(blockedUserId);
    }


    /**
     * PATCH /api/users/my-address : 내 주소 변경하기
     *
     * @param updateMyAddressRequest  (required)
     * @return Successful response (status code 200)
     *         or Forbidden (status code 403)
     */
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/api/users/my-address",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<UserDataResponse> updateMyAddress(
         @Valid @RequestBody UpdateMyAddressRequest updateMyAddressRequest
    ) {
        return getDelegate().updateMyAddress(updateMyAddressRequest);
    }


    /**
     * PATCH /api/users/me/auth-type : 인증 수단 변경하기
     *
     * @param updateMyAuthTypeRequest  (required)
     * @return Successful response (status code 200)
     *         or Not Found (status code 404)
     */
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/api/users/me/auth-type",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SimpleStringResponse> updateMyAuthType(
         @Valid @RequestBody UpdateMyAuthTypeRequest updateMyAuthTypeRequest
    ) {
        return getDelegate().updateMyAuthType(updateMyAuthTypeRequest);
    }


    /**
     * POST /api/users/mydata : 마이데이터 파입 업로드 하기
     *
     * @param updateMyDataRequest  (required)
     * @return Successful response (status code 200)
     *         or Forbidden (status code 403)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/users/mydata",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<UserDataResponse> updateMyData(
         @Valid @RequestBody UpdateMyDataRequest updateMyDataRequest
    ) {
        return getDelegate().updateMyData(updateMyDataRequest);
    }


    /**
     * PATCH /api/users/nickname : 닉네임 변경하기
     *
     * @param updateMyNicknameRequest  (required)
     * @return Successful response (status code 200)
     *         or Forbidden (status code 403)
     */
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/api/users/nickname",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SimpleStringResponse> updateMyNickname(
         @Valid @RequestBody UpdateMyNicknameRequest updateMyNicknameRequest
    ) {
        return getDelegate().updateMyNickname(updateMyNicknameRequest);
    }


    /**
     * PATCH /api/users/me : 내 프로필 변경하기
     *
     * @param updateMyProfileRequest  (required)
     * @return Successful response (status code 200)
     *         or Forbidden (status code 403)
     */
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/api/users/me",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<UserDataResponse> updateMyProfile(
         @Valid @RequestBody UpdateMyProfileRequest updateMyProfileRequest
    ) {
        return getDelegate().updateMyProfile(updateMyProfileRequest);
    }


    /**
     * PATCH /api/users/my-profile-image : 내 프로필 이미지 변경하기
     *
     * @param updateMyProfileImageRequest  (required)
     * @return Successful response (status code 200)
     *         or Forbidden (status code 403)
     */
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/api/users/my-profile-image",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SimpleImageDataResponse> updateMyProfileImage(
         @Valid @RequestBody UpdateMyProfileImageRequest updateMyProfileImageRequest
    ) {
        return getDelegate().updateMyProfileImage(updateMyProfileImageRequest);
    }


    /**
     * PATCH /api/users/push-token : 푸시 토큰 변경하기
     *
     * @param updateMyPushTokenRequest  (required)
     * @return Successful response (status code 200)
     *         or Forbidden (status code 403)
     */
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/api/users/push-token",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SimpleStringResponse> updateMyPushToken(
         @Valid @RequestBody UpdateMyPushTokenRequest updateMyPushTokenRequest
    ) {
        return getDelegate().updateMyPushToken(updateMyPushTokenRequest);
    }

}
