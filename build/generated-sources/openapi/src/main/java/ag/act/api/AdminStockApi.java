/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ag.act.api;

import ag.act.model.ErrorResponse;
import ag.act.model.GetStockDetailsDataResponse;
import ag.act.model.GetStockStatisticsDataResponse;
import ag.act.model.GetStocksResponse;
import ag.act.model.StockDataArrayResponse;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;
import jakarta.validation.*;
import ag.act.validation.constraints.*;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-02-13T06:43:13.649172+09:00[Asia/Seoul]")
@Validated
public interface AdminStockApi {

    default AdminStockApiDelegate getDelegate() {
        return new AdminStockApiDelegate() {};
    }

    /**
     * POST /api/admin/stocks/{stockCode}/users/csv-download : 해당 종목을 보유한 유저정보 엑셀 파일 다운로드
     *
     * @param stockCode Stock code parameter (required)
     * @return File download successfully (status code 200)
     *         or Bad Request. Invalid file format or data. (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/admin/stocks/{stockCode}/users/csv-download",
        produces = { "application/octet-stream", "application/json" }
    )
    default ResponseEntity<org.springframework.core.io.Resource> downloadUsersByStockCodeCsv(
         @PathVariable("stockCode") String stockCode
    ) {
        return getDelegate().downloadUsersByStockCodeCsv(stockCode);
    }


    /**
     * GET /api/admin/stocks/{code} : CMS 종목 상세 조회
     *
     * @param code Stock code (required)
     * @return Successful response (status code 200)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/admin/stocks/{code}",
        produces = { "application/json" }
    )
    default ResponseEntity<GetStockDetailsDataResponse> getStockDetails(
         @PathVariable("code") String code
    ) {
        return getDelegate().getStockDetails(code);
    }


    /**
     * GET /api/admin/stocks/{code}/statistics/{type}/{periodType} : CMS 종목 통계 정보 일별/월별 조회
     *
     * @param code Stock code (required)
     * @param type STOCK_QUANTITY(주식수) OR MEMBER_COUNT(주주수) OR MARKET_VALUE(시가액) OR STAKE(지분율) (required)
     * @param periodType DAILY OR MONTHLY (required)
     * @param period 202310 for DAILY or 2023 for MONTHLY (required)
     * @return Successful response (status code 200)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/admin/stocks/{code}/statistics/{type}/{periodType}",
        produces = { "application/json" }
    )
    default ResponseEntity<GetStockStatisticsDataResponse> getStockStatistics(
         @PathVariable("code") String code,
         @PathVariable("type") String type,
         @PathVariable("periodType") String periodType,
        @NotNull  @Valid @RequestParam(value = "period", required = true) String period
    ) {
        return getDelegate().getStockStatistics(code, type, periodType, period);
    }


    /**
     * GET /api/admin/stocks : CMS 종목 목록 조회하기
     *
     * @param code Stock code (optional)
     * @param page Page number (optional, default to 1)
     * @param size Number of items per page (optional, default to 10)
     * @param sorts Sorting criteria (optional, default to stake:desc)
     * @param isOnlyPrivateStocks filter only private stocks (optional, default to false)
     * @return Successful response (status code 200)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/admin/stocks",
        produces = { "application/json" }
    )
    default ResponseEntity<GetStocksResponse> getStocks(
         @Valid @RequestParam(value = "code", required = false) String code,
         @Valid @RequestParam(value = "page", required = false, defaultValue = "1") Integer page,
         @Valid @RequestParam(value = "size", required = false, defaultValue = "10") Integer size,
         @Valid @RequestParam(value = "sorts", required = false, defaultValue = "stake:desc") List<String> sorts,
         @Valid @RequestParam(value = "isOnlyPrivateStocks", required = false, defaultValue = "false") Boolean isOnlyPrivateStocks
    ) {
        return getDelegate().getStocks(code, page, size, sorts, isOnlyPrivateStocks);
    }


    /**
     * GET /api/admin/stocks/auto-complete : 종목명 자동 완성
     *
     * @param searchKeyword Search keyword (optional)
     * @return Success (status code 200)
     * @deprecated
     */
    @Deprecated
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/admin/stocks/auto-complete",
        produces = { "application/json" }
    )
    default ResponseEntity<StockDataArrayResponse> getStocksAutoComplete(
         @Valid @RequestParam(value = "searchKeyword", required = false) String searchKeyword
    ) {
        return getDelegate().getStocksAutoComplete(searchKeyword);
    }

}
