/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ag.act.api;

import ag.act.model.CheckEmailRequest;
import ag.act.model.CheckEmailResponse;
import ag.act.model.CheckNicknameRequest;
import ag.act.model.CheckNicknameResponse;
import ag.act.model.ErrorResponse;
import ag.act.model.MyDataTokenResponse;
import ag.act.model.PinNumberRequest;
import ag.act.model.RegisterUserInfoRequest;
import ag.act.model.SimpleStringResponse;
import ag.act.model.UserResponse;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;
import jakarta.validation.*;
import ag.act.validation.constraints.*;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-02-13T06:43:13.649172+09:00[Asia/Seoul]")
@Validated
public interface AuthenticationApi {

    default AuthenticationApiDelegate getDelegate() {
        return new AuthenticationApiDelegate() {};
    }

    /**
     * POST /api/auth/check-email : Check Email Endpoint
     *
     * @param checkEmailRequest  (required)
     * @return Successful response (status code 200)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/auth/check-email",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<CheckEmailResponse> checkEmail(
         @Valid @RequestBody CheckEmailRequest checkEmailRequest
    ) {
        return getDelegate().checkEmail(checkEmailRequest);
    }


    /**
     * POST /api/auth/check-nickname : Check Nickname Endpoint
     *
     * @param checkNicknameRequest  (required)
     * @return Successful response (status code 200)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/auth/check-nickname",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<CheckNicknameResponse> checkNickname(
         @Valid @RequestBody CheckNicknameRequest checkNicknameRequest
    ) {
        return getDelegate().checkNickname(checkNicknameRequest);
    }


    /**
     * POST /api/auth/logout : Logout Endpoint
     *
     * @return No Content (status code 200)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/auth/logout"
    )
    default ResponseEntity<Void> logout(
        
    ) {
        return getDelegate().logout();
    }


    /**
     * POST /api/auth/register-pin-number : Register Pin Number
     *
     * @param pinNumberRequest  (required)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Internal Server Error (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/auth/register-pin-number",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<UserResponse> registerPinNumber(
         @Valid @RequestBody PinNumberRequest pinNumberRequest
    ) {
        return getDelegate().registerPinNumber(pinNumberRequest);
    }


    /**
     * POST /api/auth/register-user-info : Register User Info
     *
     * @param registerUserInfoRequest  (required)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Internal Server Error (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/auth/register-user-info",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<UserResponse> registerUserInfo(
         @Valid @RequestBody RegisterUserInfoRequest registerUserInfoRequest
    ) {
        return getDelegate().registerUserInfo(registerUserInfoRequest);
    }


    /**
     * POST /api/auth/mydata-token-request : MyData Token Request
     *
     * @param authorization Authorization header (required)
     * @return Success (status code 200)
     *         or Unauthorized (status code 401)
     *         or Internal Server Error (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/auth/mydata-token-request",
        produces = { "application/json" }
    )
    default ResponseEntity<MyDataTokenResponse> requestMyDataToken(
        @NotNull  @RequestHeader(value = "Authorization", required = true) String authorization
    ) {
        return getDelegate().requestMyDataToken(authorization);
    }


    /**
     * POST /api/auth/reset-pin-number : Reset Pin Number
     *
     * @return Success (status code 200)
     *         or Unauthorized (status code 401)
     *         or Internal Server Error (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/auth/reset-pin-number",
        produces = { "application/json" }
    )
    default ResponseEntity<SimpleStringResponse> resetPinNumber(
        
    ) {
        return getDelegate().resetPinNumber();
    }


    /**
     * POST /api/auth/verify-pin-number : Verify Pin Number
     *
     * @param pinNumberRequest  (required)
     * @return Success (status code 200)
     *         or Unauthorized (status code 401)
     *         or Internal Server Error (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/auth/verify-pin-number",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<UserResponse> verifyPinNumber(
         @Valid @RequestBody PinNumberRequest pinNumberRequest
    ) {
        return getDelegate().verifyPinNumber(pinNumberRequest);
    }

}
