/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ag.act.api;

import ag.act.model.ErrorResponse;
import ag.act.model.GetSolidarityLeaderApplicantResponse;
import ag.act.model.SimpleStringResponse;
import ag.act.model.SolidarityLeaderApplicationResponse;
import ag.act.model.SolidarityLeaderElectionApplyRequest;
import ag.act.model.SolidarityLeaderElectionProceduresDataResponse;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;
import jakarta.validation.*;
import ag.act.validation.constraints.*;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-02-13T06:43:13.649172+09:00[Asia/Seoul]")
@Validated
public interface SolidarityLeaderElectionApi {

    default SolidarityLeaderElectionApiDelegate getDelegate() {
        return new SolidarityLeaderElectionApiDelegate() {};
    }

    /**
     * POST /api/stocks/{stockCode}/solidarity-leader-elections/solidarity-leader-applicants : 주주대표 지원하기
     *
     * @param stockCode Stock Code (required)
     * @param solidarityLeaderElectionApplyRequest  (required)
     * @return Successful response (status code 200)
     *         or Bad Request (status code 400)
     *         or Not Found (status code 404)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/stocks/{stockCode}/solidarity-leader-elections/solidarity-leader-applicants",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SimpleStringResponse> createSolidarityLeaderApplicant(
         @PathVariable("stockCode") String stockCode,
         @Valid @RequestBody SolidarityLeaderElectionApplyRequest solidarityLeaderElectionApplyRequest
    ) {
        return getDelegate().createSolidarityLeaderApplicant(stockCode, solidarityLeaderElectionApplyRequest);
    }


    /**
     * GET /api/stocks/{stockCode}/solidarity-leader-elections/solidarity-leader-applicants/latest : 가장 최근 작성한 지원서 조회, 지원서 id, 선출 id, 제출 상태는 포함되지 않고 전달됩니다.
     *
     * @param stockCode Stock Code (required)
     * @return Successful response (status code 200)
     *         or Bad Request (status code 400)
     *         or Not Found (status code 404)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/stocks/{stockCode}/solidarity-leader-elections/solidarity-leader-applicants/latest",
        produces = { "application/json" }
    )
    default ResponseEntity<SolidarityLeaderApplicationResponse> getLatestSolidarityLeaderApplication(
         @PathVariable("stockCode") String stockCode
    ) {
        return getDelegate().getLatestSolidarityLeaderApplication(stockCode);
    }


    /**
     * GET /api/stocks/{stockCode}/solidarity-leader-elections/{solidarityLeaderElectionId}/solidarity-leader-applicants : 주주대표 지원자 목록 조회
     *
     * @param stockCode Stock code parameter (required)
     * @param solidarityLeaderElectionId Solidarity Leader Election Id (required)
     * @return Successful response (status code 200)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/stocks/{stockCode}/solidarity-leader-elections/{solidarityLeaderElectionId}/solidarity-leader-applicants",
        produces = { "application/json" }
    )
    default ResponseEntity<GetSolidarityLeaderApplicantResponse> getSolidarityLeaderApplicants(
         @PathVariable("stockCode") String stockCode,
         @PathVariable("solidarityLeaderElectionId") Long solidarityLeaderElectionId
    ) {
        return getDelegate().getSolidarityLeaderApplicants(stockCode, solidarityLeaderElectionId);
    }


    /**
     * GET /api/stocks/{stockCode}/solidarity-leader-elections/{solidarityLeaderElectionId}/solidarity-leader-applicants/{solidarityLeaderApplicantId} : 주주대표 지원서 조회하기
     * 임시저장 상태의 경우 작성자만 조회 가능하고, 제출 완료 상태의 경우 주주라면 조회 가능합니다.
     *
     * @param stockCode Stock Code (required)
     * @param solidarityLeaderElectionId Solidarity Leader Election ID (required)
     * @param solidarityLeaderApplicantId Solidarity Leader Applicant ID (required)
     * @return Successful response (status code 200)
     *         or Bad Request (status code 400)
     *         or Not Found (status code 404)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/stocks/{stockCode}/solidarity-leader-elections/{solidarityLeaderElectionId}/solidarity-leader-applicants/{solidarityLeaderApplicantId}",
        produces = { "application/json" }
    )
    default ResponseEntity<SolidarityLeaderApplicationResponse> getSolidarityLeaderApplication(
         @PathVariable("stockCode") String stockCode,
         @PathVariable("solidarityLeaderElectionId") Long solidarityLeaderElectionId,
         @PathVariable("solidarityLeaderApplicantId") Long solidarityLeaderApplicantId
    ) {
        return getDelegate().getSolidarityLeaderApplication(stockCode, solidarityLeaderElectionId, solidarityLeaderApplicantId);
    }


    /**
     * GET /api/solidarity-leader-elections/procedures : 선출 과정 안내 조회
     * 선출 과정 안내 리스트를 조회한다.
     *
     * @return Successful response (status code 200)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/solidarity-leader-elections/procedures",
        produces = { "application/json" }
    )
    default ResponseEntity<SolidarityLeaderElectionProceduresDataResponse> getSolidarityLeaderElectionProcedures(
        
    ) {
        return getDelegate().getSolidarityLeaderElectionProcedures();
    }


    /**
     * PATCH /api/stocks/{stockCode}/solidarity-leader-elections/{solidarityLeaderElectionId}/solidarity-leader-applicants/{solidarityLeaderApplicantId} : 주주대표 지원서 수정하기 (임시저장 제출)
     *
     * @param stockCode Stock Code (required)
     * @param solidarityLeaderElectionId Solidarity Leader Election Id (required)
     * @param solidarityLeaderApplicantId Solidarity Leader Applicant Id (required)
     * @param solidarityLeaderElectionApplyRequest  (required)
     * @return Successful response (status code 200)
     *         or Bad Request (status code 400)
     *         or Not Found (status code 403)
     *         or Not Found (status code 404)
     */
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/api/stocks/{stockCode}/solidarity-leader-elections/{solidarityLeaderElectionId}/solidarity-leader-applicants/{solidarityLeaderApplicantId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SimpleStringResponse> updateSolidarityLeaderApplicant(
         @PathVariable("stockCode") String stockCode,
         @PathVariable("solidarityLeaderElectionId") Long solidarityLeaderElectionId,
         @PathVariable("solidarityLeaderApplicantId") Long solidarityLeaderApplicantId,
         @Valid @RequestBody SolidarityLeaderElectionApplyRequest solidarityLeaderElectionApplyRequest
    ) {
        return getDelegate().updateSolidarityLeaderApplicant(stockCode, solidarityLeaderElectionId, solidarityLeaderApplicantId, solidarityLeaderElectionApplyRequest);
    }


    /**
     * DELETE /api/stocks/{stockCode}/solidarity-leader-elections/{solidarityLeaderElectionId}/solidarity-leader-applicants/{solidarityLeaderApplicantId} : 주주대표 지원 취소하기
     * 후보자 선출이 시작되기 전 임시저장 상태 또는 후보자 등록 기간에 취소가 가능합니다. 단일 후보자일 때 취소하게 되면 선출 프로세스가 종료됩니다.
     *
     * @param stockCode Stock Code (required)
     * @param solidarityLeaderElectionId Solidarity Leader Election ID (required)
     * @param solidarityLeaderApplicantId Solidarity Leader Applicant ID (required)
     * @return Successful response (status code 200)
     *         or Bad Request (status code 400)
     *         or Not Found (status code 404)
     */
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/stocks/{stockCode}/solidarity-leader-elections/{solidarityLeaderElectionId}/solidarity-leader-applicants/{solidarityLeaderApplicantId}",
        produces = { "application/json" }
    )
    default ResponseEntity<SimpleStringResponse> withdrawSolidarityLeaderApplication(
         @PathVariable("stockCode") String stockCode,
         @PathVariable("solidarityLeaderElectionId") Long solidarityLeaderElectionId,
         @PathVariable("solidarityLeaderApplicantId") Long solidarityLeaderApplicantId
    ) {
        return getDelegate().withdrawSolidarityLeaderApplication(stockCode, solidarityLeaderElectionId, solidarityLeaderApplicantId);
    }

}
