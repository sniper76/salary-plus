/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ag.act.api;

import ag.act.model.DashboardStatisticsAgeDataResponse;
import ag.act.model.DashboardStatisticsDataResponse;
import ag.act.model.DashboardStatisticsGenderDataResponse;
import ag.act.model.ErrorResponse;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;
import jakarta.validation.*;
import ag.act.validation.constraints.*;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-02-13T06:43:13.649172+09:00[Asia/Seoul]")
@Validated
public interface AdminDashboardStatisticsApi {

    default AdminDashboardStatisticsApiDelegate getDelegate() {
        return new AdminDashboardStatisticsApiDelegate() {};
    }

    /**
     * GET /api/admin/dashboard/statistics : CMS 대쉬보드 전체/종목별 일별/월별 통계 조회
     * 대쉬보드 화면 상단 전체 정보와 하단의 종목별 정보 파라미터별로 조회한다.
     *
     * @param type DashboardStatisticsType 기본값 없으면 전체 차트 조회 (optional)
     * @param stockCode stockCode 기본값 없으면 전체 차트 조회 (optional)
     * @param periodType DAILY or MONTHLY 기본값은 DAILY (optional)
     * @param searchFrom 2023-11-24 or 2023-05 is period 7 (optional)
     * @param searchTo 2023-11-30 or 2023-11 is period 7 (optional)
     * @return Successful response (status code 200)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/admin/dashboard/statistics",
        produces = { "application/json" }
    )
    default ResponseEntity<DashboardStatisticsDataResponse> getStatistics(
         @Valid @RequestParam(value = "type", required = false) String type,
         @Valid @RequestParam(value = "stockCode", required = false) String stockCode,
         @Valid @RequestParam(value = "periodType", required = false) String periodType,
         @Valid @RequestParam(value = "searchFrom", required = false) String searchFrom,
         @Valid @RequestParam(value = "searchTo", required = false) String searchTo
    ) {
        return getDelegate().getStatistics(type, stockCode, periodType, searchFrom, searchTo);
    }


    /**
     * GET /api/admin/dashboard/statistics/age : CMS 대쉬보드 나이별 일별/월별 통계 조회
     *
     * @param periodType DAILY or MONTHLY 기본값은 DAILY (optional)
     * @param searchFrom 2023-11-24 or 2023-05 is period 7 (optional)
     * @param searchTo 2023-11-30 or 2023-11 is period 7 (optional)
     * @return Successful response (status code 200)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/admin/dashboard/statistics/age",
        produces = { "application/json" }
    )
    default ResponseEntity<DashboardStatisticsAgeDataResponse> getStatisticsAge(
         @Valid @RequestParam(value = "periodType", required = false) String periodType,
         @Valid @RequestParam(value = "searchFrom", required = false) String searchFrom,
         @Valid @RequestParam(value = "searchTo", required = false) String searchTo
    ) {
        return getDelegate().getStatisticsAge(periodType, searchFrom, searchTo);
    }


    /**
     * GET /api/admin/dashboard/statistics/gender : CMS 대쉬보드 성별 일별/월별 통계 조회
     *
     * @param periodType DAILY or MONTHLY 기본값은 DAILY (optional)
     * @param searchFrom 2023-11-24 or 2023-05 is period 7 (optional)
     * @param searchTo 2023-11-30 or 2023-11 is period 7 (optional)
     * @return Successful response (status code 200)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/admin/dashboard/statistics/gender",
        produces = { "application/json" }
    )
    default ResponseEntity<DashboardStatisticsGenderDataResponse> getStatisticsGender(
         @Valid @RequestParam(value = "periodType", required = false) String periodType,
         @Valid @RequestParam(value = "searchFrom", required = false) String searchFrom,
         @Valid @RequestParam(value = "searchTo", required = false) String searchTo
    ) {
        return getDelegate().getStatisticsGender(periodType, searchFrom, searchTo);
    }

}
